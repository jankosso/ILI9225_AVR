
ILI9225.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000d2e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000cba  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  00800100  00800100  00000d2e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000d2e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000d60  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000120  00000000  00000000  00000da0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002759  00000000  00000000  00000ec0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000045d  00000000  00000000  00003619  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006f9  00000000  00000000  00003a76  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005ac  00000000  00000000  00004170  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000044b  00000000  00000000  0000471c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002747  00000000  00000000  00004b67  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000130  00000000  00000000  000072ae  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a7 30       	cpi	r26, 0x07	; 7
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 b2 05 	call	0xb64	; 0xb64 <main>
  88:	0c 94 5b 06 	jmp	0xcb6	; 0xcb6 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <_writeCommand>:
 	_writeCommand(reg >> 8, reg & 255);
 	_writeData(data >> 8, data & 255);
 }
 void _swap(uint16_t *a, uint16_t *b) {
	 uint16_t w = *a;
	 *a = *b;
  90:	29 98       	cbi	0x05, 1	; 5
  92:	2a 98       	cbi	0x05, 2	; 5
  94:	8e bd       	out	0x2e, r24	; 46
	 *b = w;
  96:	0d b4       	in	r0, 0x2d	; 45
 	_writeCommand(reg >> 8, reg & 255);
 	_writeData(data >> 8, data & 255);
 }
 void _swap(uint16_t *a, uint16_t *b) {
	 uint16_t w = *a;
	 *a = *b;
  98:	07 fe       	sbrs	r0, 7
  9a:	fd cf       	rjmp	.-6      	; 0x96 <_writeCommand+0x6>
		_swap(&y1, &y2); _swap(&x1, &x2);
	}
	if (y2 > y3) {
		_swap(&y3, &y2); _swap(&x3, &x2);
	}
	if (y1 > y2) {
  9c:	6e bd       	out	0x2e, r22	; 46
  9e:	0d b4       	in	r0, 0x2d	; 45
  a0:	07 fe       	sbrs	r0, 7
  a2:	fd cf       	rjmp	.-6      	; 0x9e <_writeCommand+0xe>
  a4:	2a 9a       	sbi	0x05, 2	; 5
  a6:	08 95       	ret

000000a8 <_writeData>:
  a8:	29 9a       	sbi	0x05, 1	; 5
  aa:	2a 98       	cbi	0x05, 2	; 5
  ac:	8e bd       	out	0x2e, r24	; 46
  ae:	0d b4       	in	r0, 0x2d	; 45
  b0:	07 fe       	sbrs	r0, 7
  b2:	fd cf       	rjmp	.-6      	; 0xae <_writeData+0x6>
  b4:	6e bd       	out	0x2e, r22	; 46
  b6:	0d b4       	in	r0, 0x2d	; 45
  b8:	07 fe       	sbrs	r0, 7
  ba:	fd cf       	rjmp	.-6      	; 0xb6 <_writeData+0xe>
  bc:	2a 9a       	sbi	0x05, 2	; 5
  be:	08 95       	ret

000000c0 <_writeRegister>:
		_swap(&y1, &y2); _swap(&x1, &x2);
	}

	if (y1 == y3) { // Handle awkward all-on-same-line case as its own thing
  c0:	cf 93       	push	r28
  c2:	df 93       	push	r29
  c4:	d6 2f       	mov	r29, r22
  c6:	c7 2f       	mov	r28, r23
  c8:	68 2f       	mov	r22, r24
		a = b = x1;
		if (x2 < a)      a = x2;
  ca:	89 2f       	mov	r24, r25
  cc:	0e 94 48 00 	call	0x90	; 0x90 <_writeCommand>
  d0:	6d 2f       	mov	r22, r29
  d2:	8c 2f       	mov	r24, r28
  d4:	0e 94 54 00 	call	0xa8	; 0xa8 <_writeData>
  d8:	df 91       	pop	r29
	if (y1 > y2) {
		_swap(&y1, &y2); _swap(&x1, &x2);
	}

	if (y1 == y3) { // Handle awkward all-on-same-line case as its own thing
		a = b = x1;
  da:	cf 91       	pop	r28
  dc:	08 95       	ret

000000de <_orientCoordinates>:
		if (x2 < a)      a = x2;
		else if (x2 > b) b = x2;
		if (x3 < a)      a = x3;
  de:	fc 01       	movw	r30, r24
  e0:	90 91 00 01 	lds	r25, 0x0100
  e4:	92 30       	cpi	r25, 0x02	; 2
  e6:	d1 f0       	breq	.+52     	; 0x11c <_orientCoordinates+0x3e>
  e8:	93 30       	cpi	r25, 0x03	; 3
  ea:	81 f1       	breq	.+96     	; 0x14c <_orientCoordinates+0x6e>
  ec:	91 30       	cpi	r25, 0x01	; 1
		else if (x3 > b) b = x3;
			ILI9225_drawLine(a, y1, b, y1, color);
  ee:	09 f0       	breq	.+2      	; 0xf2 <_orientCoordinates+0x14>
  f0:	40 c0       	rjmp	.+128    	; 0x172 <_orientCoordinates+0x94>
  f2:	80 91 05 01 	lds	r24, 0x0105
  f6:	90 91 06 01 	lds	r25, 0x0106
  fa:	01 97       	sbiw	r24, 0x01	; 1
  fc:	db 01       	movw	r26, r22
		return;
	}

	uint16_t	dx11 = x2 - x1,
  fe:	2d 91       	ld	r18, X+
 100:	3c 91       	ld	r19, X
 102:	11 97       	sbiw	r26, 0x01	; 1
 104:	82 1b       	sub	r24, r18
 106:	93 0b       	sbc	r25, r19
				dy11 = y2 - y1,
 108:	11 96       	adiw	r26, 0x01	; 1
 10a:	9c 93       	st	X, r25
 10c:	8e 93       	st	-X, r24
 10e:	20 81       	ld	r18, Z
 110:	31 81       	ldd	r19, Z+1	; 0x01
 112:	91 83       	std	Z+1, r25	; 0x01
 114:	80 83       	st	Z, r24
 116:	2d 93       	st	X+, r18
				dx12 = x3 - x1,
 118:	3c 93       	st	X, r19
 11a:	08 95       	ret
 11c:	80 91 03 01 	lds	r24, 0x0103
				dy12 = y3 - y1,
 120:	90 91 04 01 	lds	r25, 0x0104
 124:	01 97       	sbiw	r24, 0x01	; 1
 126:	20 81       	ld	r18, Z
				dx22 = x3 - x2,
 128:	31 81       	ldd	r19, Z+1	; 0x01
 12a:	82 1b       	sub	r24, r18
 12c:	93 0b       	sbc	r25, r19
				dy22 = y3 - y2,
 12e:	91 83       	std	Z+1, r25	; 0x01
 130:	80 83       	st	Z, r24
 132:	80 91 05 01 	lds	r24, 0x0105
 136:	90 91 06 01 	lds	r25, 0x0106
 13a:	01 97       	sbiw	r24, 0x01	; 1
	// 0-1 and 0-2.  If y2=y3 (flat-bottomed triangle), the scanline y2
	// is included here (and second loop will be skipped, avoiding a /0
	// error there), otherwise scanline y2 is skipped here and handled
	// in the second loop...which also avoids a /0 error here if y1=y2
	// (flat-topped triangle).
	if (y2 == y3) last = y2;   // Include y2 scanline
 13c:	fb 01       	movw	r30, r22
 13e:	20 81       	ld	r18, Z
 140:	31 81       	ldd	r19, Z+1	; 0x01
	else          last = y2 - 1; // Skip it
 142:	82 1b       	sub	r24, r18
 144:	93 0b       	sbc	r25, r19
 146:	91 83       	std	Z+1, r25	; 0x01
 148:	80 83       	st	Z, r24
 14a:	08 95       	ret
 14c:	80 91 03 01 	lds	r24, 0x0103

	for (y = y1; y <= last; y++) {
 150:	90 91 04 01 	lds	r25, 0x0104
 154:	01 97       	sbiw	r24, 0x01	; 1
 156:	20 81       	ld	r18, Z
 158:	31 81       	ldd	r19, Z+1	; 0x01
 15a:	82 1b       	sub	r24, r18
 15c:	93 0b       	sbc	r25, r19
 15e:	91 83       	std	Z+1, r25	; 0x01
 160:	80 83       	st	Z, r24
 162:	db 01       	movw	r26, r22
 164:	2d 91       	ld	r18, X+
 166:	3c 91       	ld	r19, X
 168:	11 97       	sbiw	r26, 0x01	; 1
 16a:	31 83       	std	Z+1, r19	; 0x01
 16c:	20 83       	st	Z, r18
 16e:	8d 93       	st	X+, r24
 170:	9c 93       	st	X, r25
 172:	08 95       	ret

00000174 <ILI9225_setWindow>:
 174:	cf 93       	push	r28
	a   = x1 + sa / dy11;
 176:	df 93       	push	r29
 178:	cd b7       	in	r28, 0x3d	; 61
 17a:	de b7       	in	r29, 0x3e	; 62
 17c:	28 97       	sbiw	r28, 0x08	; 8
 17e:	0f b6       	in	r0, 0x3f	; 63
 180:	f8 94       	cli
 182:	de bf       	out	0x3e, r29	; 62
 184:	0f be       	out	0x3f, r0	; 63
	b   = x1 + sb / dy12;
 186:	cd bf       	out	0x3d, r28	; 61
 188:	9a 83       	std	Y+2, r25	; 0x02
 18a:	89 83       	std	Y+1, r24	; 0x01
 18c:	7c 83       	std	Y+4, r23	; 0x04
 18e:	6b 83       	std	Y+3, r22	; 0x03
 190:	5e 83       	std	Y+6, r21	; 0x06
 192:	4d 83       	std	Y+5, r20	; 0x05
 194:	38 87       	std	Y+8, r19	; 0x08
	sa += dx11;
 196:	2f 83       	std	Y+7, r18	; 0x07
 198:	be 01       	movw	r22, r28
	sb += dx12;
 19a:	6d 5f       	subi	r22, 0xFD	; 253
 19c:	7f 4f       	sbci	r23, 0xFF	; 255
	/* longhand:
	a = x1 + (x2 - x1) * (y - y1) / (y2 - y1);
	b = x1 + (x3 - x1) * (y - y1) / (y3 - y1);
	*/
	if (a > b) _swap(&a,&b);
 19e:	ce 01       	movw	r24, r28
 1a0:	01 96       	adiw	r24, 0x01	; 1
 1a2:	0e 94 6f 00 	call	0xde	; 0xde <_orientCoordinates>
 1a6:	be 01       	movw	r22, r28
 	_writeCommand(reg >> 8, reg & 255);
 	_writeData(data >> 8, data & 255);
 }
 void _swap(uint16_t *a, uint16_t *b) {
	 uint16_t w = *a;
	 *a = *b;
 1a8:	69 5f       	subi	r22, 0xF9	; 249
	 *b = w;
 1aa:	7f 4f       	sbci	r23, 0xFF	; 255
 1ac:	ce 01       	movw	r24, r28
	/* longhand:
	a = x1 + (x2 - x1) * (y - y1) / (y2 - y1);
	b = x1 + (x3 - x1) * (y - y1) / (y3 - y1);
	*/
	if (a > b) _swap(&a,&b);
		ILI9225_drawLine(a, y, b, y, color);
 1ae:	05 96       	adiw	r24, 0x05	; 5
 1b0:	0e 94 6f 00 	call	0xde	; 0xde <_orientCoordinates>
 1b4:	2d 81       	ldd	r18, Y+5	; 0x05
 1b6:	3e 81       	ldd	r19, Y+6	; 0x06
 1b8:	89 81       	ldd	r24, Y+1	; 0x01
 1ba:	9a 81       	ldd	r25, Y+2	; 0x02
 1bc:	28 17       	cp	r18, r24
	// in the second loop...which also avoids a /0 error here if y1=y2
	// (flat-topped triangle).
	if (y2 == y3) last = y2;   // Include y2 scanline
	else          last = y2 - 1; // Skip it

	for (y = y1; y <= last; y++) {
 1be:	39 07       	cpc	r19, r25
 1c0:	20 f4       	brcc	.+8      	; 0x1ca <ILI9225_setWindow+0x56>
 1c2:	3a 83       	std	Y+2, r19	; 0x02
 1c4:	29 83       	std	Y+1, r18	; 0x01
 1c6:	9e 83       	std	Y+6, r25	; 0x06
 1c8:	8d 83       	std	Y+5, r24	; 0x05
 1ca:	2f 81       	ldd	r18, Y+7	; 0x07
 1cc:	38 85       	ldd	r19, Y+8	; 0x08
 1ce:	8b 81       	ldd	r24, Y+3	; 0x03
 1d0:	9c 81       	ldd	r25, Y+4	; 0x04
 1d2:	28 17       	cp	r18, r24
 1d4:	39 07       	cpc	r19, r25
 1d6:	20 f4       	brcc	.+8      	; 0x1e0 <ILI9225_setWindow+0x6c>
 1d8:	3c 83       	std	Y+4, r19	; 0x04
 1da:	2b 83       	std	Y+3, r18	; 0x03
 1dc:	98 87       	std	Y+8, r25	; 0x08
 1de:	8f 83       	std	Y+7, r24	; 0x07
 1e0:	6d 81       	ldd	r22, Y+5	; 0x05
		ILI9225_drawLine(a, y, b, y, color);
	}

	// For lower part of triangle, find scanline crossings for segments
	// 0-2 and 1-2.  This loop is skipped if y2=y3.
	sa = dx22 * (y - y2);
 1e2:	7e 81       	ldd	r23, Y+6	; 0x06
 1e4:	86 e3       	ldi	r24, 0x36	; 54
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	0e 94 60 00 	call	0xc0	; 0xc0 <_writeRegister>
 1ec:	69 81       	ldd	r22, Y+1	; 0x01
 1ee:	7a 81       	ldd	r23, Y+2	; 0x02
 1f0:	87 e3       	ldi	r24, 0x37	; 55
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	0e 94 60 00 	call	0xc0	; 0xc0 <_writeRegister>
 1f8:	6f 81       	ldd	r22, Y+7	; 0x07
 1fa:	78 85       	ldd	r23, Y+8	; 0x08
	sb = dx12 * (y - y1);
 1fc:	88 e3       	ldi	r24, 0x38	; 56
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	0e 94 60 00 	call	0xc0	; 0xc0 <_writeRegister>
 204:	6b 81       	ldd	r22, Y+3	; 0x03
 206:	7c 81       	ldd	r23, Y+4	; 0x04
 208:	89 e3       	ldi	r24, 0x39	; 57
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	0e 94 60 00 	call	0xc0	; 0xc0 <_writeRegister>
 210:	69 81       	ldd	r22, Y+1	; 0x01
 212:	7a 81       	ldd	r23, Y+2	; 0x02
 214:	80 e2       	ldi	r24, 0x20	; 32
	for (; y<=y3; y++) {
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	0e 94 60 00 	call	0xc0	; 0xc0 <_writeRegister>
 21c:	6b 81       	ldd	r22, Y+3	; 0x03
 21e:	7c 81       	ldd	r23, Y+4	; 0x04
		a   = x2 + sa / dy22;
 220:	81 e2       	ldi	r24, 0x21	; 33
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	0e 94 60 00 	call	0xc0	; 0xc0 <_writeRegister>
 228:	62 e2       	ldi	r22, 0x22	; 34
 22a:	80 e0       	ldi	r24, 0x00	; 0
 22c:	0e 94 48 00 	call	0x90	; 0x90 <_writeCommand>
		b   = x1 + sb / dy12;
 230:	28 96       	adiw	r28, 0x08	; 8
 232:	0f b6       	in	r0, 0x3f	; 63
 234:	f8 94       	cli
 236:	de bf       	out	0x3e, r29	; 62
 238:	0f be       	out	0x3f, r0	; 63
 23a:	cd bf       	out	0x3d, r28	; 61
 23c:	df 91       	pop	r29
 23e:	cf 91       	pop	r28
		sa += dx22;
 240:	08 95       	ret

00000242 <ILI9225_setBacklight>:
 242:	88 23       	and	r24, r24
		sb += dx12;
 244:	11 f0       	breq	.+4      	; 0x24a <ILI9225_setBacklight+0x8>
 246:	5b 9a       	sbi	0x0b, 3	; 11
		/* longhand:
		a = x2 + (x3 - x2) * (y - y2) / (y3 - y2);
		b = x1 + (x3 - x1) * (y - y1) / (y3 - y1);
		*/
		if (a > b) _swap(&a,&b);
 248:	08 95       	ret
 24a:	5b 98       	cbi	0x0b, 3	; 11
 24c:	08 95       	ret

0000024e <ILI9225_setOrientation>:
 24e:	83 70       	andi	r24, 0x03	; 3
 250:	80 93 00 01 	sts	0x0100, r24
 	_writeData(data >> 8, data & 255);
 }
 void _swap(uint16_t *a, uint16_t *b) {
	 uint16_t w = *a;
	 *a = *b;
	 *b = w;
 254:	81 30       	cpi	r24, 0x01	; 1
 256:	99 f0       	breq	.+38     	; 0x27e <ILI9225_setOrientation+0x30>
		/* longhand:
		a = x2 + (x3 - x2) * (y - y2) / (y3 - y2);
		b = x1 + (x3 - x1) * (y - y1) / (y3 - y1);
		*/
		if (a > b) _swap(&a,&b);
			ILI9225_drawLine(a, y, b, y, color);
 258:	28 f0       	brcs	.+10     	; 0x264 <ILI9225_setOrientation+0x16>
 25a:	82 30       	cpi	r24, 0x02	; 2
 25c:	e9 f0       	breq	.+58     	; 0x298 <ILI9225_setOrientation+0x4a>
 25e:	83 30       	cpi	r24, 0x03	; 3
 260:	41 f1       	breq	.+80     	; 0x2b2 <ILI9225_setOrientation+0x64>
 262:	08 95       	ret
 264:	80 eb       	ldi	r24, 0xB0	; 176
 266:	90 e0       	ldi	r25, 0x00	; 0

	// For lower part of triangle, find scanline crossings for segments
	// 0-2 and 1-2.  This loop is skipped if y2=y3.
	sa = dx22 * (y - y2);
	sb = dx12 * (y - y1);
	for (; y<=y3; y++) {
 268:	90 93 04 01 	sts	0x0104, r25
 26c:	80 93 03 01 	sts	0x0103, r24
 270:	8c ed       	ldi	r24, 0xDC	; 220
 272:	90 e0       	ldi	r25, 0x00	; 0
 274:	90 93 06 01 	sts	0x0106, r25
 278:	80 93 05 01 	sts	0x0105, r24

	// Sort coordinates by Y order (y3 >= y2 >= y1)
	if (y1 > y2) {
		_swap(&y1, &y2); _swap(&x1, &x2);
	}
	if (y2 > y3) {
 27c:	08 95       	ret
 27e:	8c ed       	ldi	r24, 0xDC	; 220
 280:	90 e0       	ldi	r25, 0x00	; 0
 282:	90 93 04 01 	sts	0x0104, r25
 286:	80 93 03 01 	sts	0x0103, r24
		b = x1 + (x3 - x1) * (y - y1) / (y3 - y1);
		*/
		if (a > b) _swap(&a,&b);
			ILI9225_drawLine(a, y, b, y, color);
	}
}
 28a:	80 eb       	ldi	r24, 0xB0	; 176
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	90 93 06 01 	sts	0x0106, r25
 292:	80 93 05 01 	sts	0x0105, r24
 296:	08 95       	ret
 298:	80 eb       	ldi	r24, 0xB0	; 176
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	90 93 04 01 	sts	0x0104, r25
 2a0:	80 93 03 01 	sts	0x0103, r24
 2a4:	8c ed       	ldi	r24, 0xDC	; 220
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	90 93 06 01 	sts	0x0106, r25
 2ac:	80 93 05 01 	sts	0x0105, r24
 2b0:	08 95       	ret
 2b2:	8c ed       	ldi	r24, 0xDC	; 220
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	90 93 04 01 	sts	0x0104, r25
 2ba:	80 93 03 01 	sts	0x0103, r24
		 _maxX = ILI9225_LCD_WIDTH;
		 _maxY = ILI9225_LCD_HEIGHT;
		 break;
		 case 3:
		 _maxX = ILI9225_LCD_HEIGHT;
		 _maxY = ILI9225_LCD_WIDTH;
 2be:	80 eb       	ldi	r24, 0xB0	; 176
 2c0:	90 e0       	ldi	r25, 0x00	; 0
 2c2:	90 93 06 01 	sts	0x0106, r25
 2c6:	80 93 05 01 	sts	0x0105, r24
 2ca:	08 95       	ret

000002cc <ILI9225_fillRectangle>:
	 ILI9225_drawLine(x1, y1, x2, y1, color);
	 ILI9225_drawLine(x1, y2, x2, y2, color);
	 ILI9225_drawLine(x2, y1, x2, y2, color);
 }

 void ILI9225_fillRectangle(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t color) {
 2cc:	af 92       	push	r10
 2ce:	bf 92       	push	r11
 2d0:	cf 92       	push	r12
 2d2:	df 92       	push	r13
 2d4:	ef 92       	push	r14
 2d6:	ff 92       	push	r15
 2d8:	0f 93       	push	r16
 2da:	1f 93       	push	r17
 2dc:	cf 93       	push	r28
 2de:	df 93       	push	r29
 2e0:	5c 01       	movw	r10, r24
 2e2:	6b 01       	movw	r12, r22
 2e4:	7a 01       	movw	r14, r20
 2e6:	e9 01       	movw	r28, r18

	 ILI9225_setWindow(x1, y1, x2, y2);
 2e8:	0e 94 ba 00 	call	0x174	; 0x174 <ILI9225_setWindow>
 2ec:	8f ef       	ldi	r24, 0xFF	; 255
 2ee:	e8 1a       	sub	r14, r24
 2f0:	f8 0a       	sbc	r15, r24

	 for(uint16_t t=(y2 - y1 + 1) * (x2 - x1 + 1); t > 0; t--)
 2f2:	ea 18       	sub	r14, r10
 2f4:	fb 08       	sbc	r15, r11
 2f6:	21 96       	adiw	r28, 0x01	; 1
 2f8:	ce 01       	movw	r24, r28
 2fa:	8c 19       	sub	r24, r12
 2fc:	9d 09       	sbc	r25, r13
 2fe:	e8 9e       	mul	r14, r24
 300:	e0 01       	movw	r28, r0
 302:	e9 9e       	mul	r14, r25
 304:	d0 0d       	add	r29, r0
 306:	f8 9e       	mul	r15, r24
 308:	d0 0d       	add	r29, r0
 30a:	11 24       	eor	r1, r1
 30c:	20 97       	sbiw	r28, 0x00	; 0
 30e:	31 f0       	breq	.+12     	; 0x31c <ILI9225_fillRectangle+0x50>
	 _writeData(color >> 8, color);
 310:	60 2f       	mov	r22, r16
 312:	81 2f       	mov	r24, r17
 314:	0e 94 54 00 	call	0xa8	; 0xa8 <_writeData>

 void ILI9225_fillRectangle(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t color) {

	 ILI9225_setWindow(x1, y1, x2, y2);

	 for(uint16_t t=(y2 - y1 + 1) * (x2 - x1 + 1); t > 0; t--)
 318:	21 97       	sbiw	r28, 0x01	; 1
 31a:	d1 f7       	brne	.-12     	; 0x310 <ILI9225_fillRectangle+0x44>
	 _writeData(color >> 8, color);
 }
 31c:	df 91       	pop	r29
 31e:	cf 91       	pop	r28
 320:	1f 91       	pop	r17
 322:	0f 91       	pop	r16
 324:	ff 90       	pop	r15
 326:	ef 90       	pop	r14
 328:	df 90       	pop	r13
 32a:	cf 90       	pop	r12
 32c:	bf 90       	pop	r11
 32e:	af 90       	pop	r10
 330:	08 95       	ret

00000332 <ILI9225_clear>:
	 _writeRegister(ILI9225_RAM_ADDR_SET1,x0);
	 _writeRegister(ILI9225_RAM_ADDR_SET2,y0);

	 _writeCommand(0x00, 0x22);
 }
 void ILI9225_clear() {
 332:	0f 93       	push	r16
 334:	1f 93       	push	r17
 336:	cf 93       	push	r28
	 uint8_t old = _orientation;
 338:	c0 91 00 01 	lds	r28, 0x0100
	 ILI9225_setOrientation(0);
 33c:	80 e0       	ldi	r24, 0x00	; 0
 33e:	0e 94 27 01 	call	0x24e	; 0x24e <ILI9225_setOrientation>
	 ILI9225_fillRectangle(0, 0, _maxX - 1, _maxY - 1, COLOR_BLACK);
 342:	20 91 05 01 	lds	r18, 0x0105
 346:	30 91 06 01 	lds	r19, 0x0106
 34a:	21 50       	subi	r18, 0x01	; 1
 34c:	31 09       	sbc	r19, r1
 34e:	40 91 03 01 	lds	r20, 0x0103
 352:	50 91 04 01 	lds	r21, 0x0104
 356:	41 50       	subi	r20, 0x01	; 1
 358:	51 09       	sbc	r21, r1
 35a:	00 e0       	ldi	r16, 0x00	; 0
 35c:	10 e0       	ldi	r17, 0x00	; 0
 35e:	60 e0       	ldi	r22, 0x00	; 0
 360:	70 e0       	ldi	r23, 0x00	; 0
 362:	80 e0       	ldi	r24, 0x00	; 0
 364:	90 e0       	ldi	r25, 0x00	; 0
 366:	0e 94 66 01 	call	0x2cc	; 0x2cc <ILI9225_fillRectangle>
	 ILI9225_setOrientation(old);
 36a:	8c 2f       	mov	r24, r28
 36c:	0e 94 27 01 	call	0x24e	; 0x24e <ILI9225_setOrientation>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 370:	8f e2       	ldi	r24, 0x2F	; 47
 372:	95 e7       	ldi	r25, 0x75	; 117
 374:	01 97       	sbiw	r24, 0x01	; 1
 376:	f1 f7       	brne	.-4      	; 0x374 <ILI9225_clear+0x42>
 378:	00 c0       	rjmp	.+0      	; 0x37a <ILI9225_clear+0x48>
 37a:	00 00       	nop
	 _delay_ms(10);
 }
 37c:	cf 91       	pop	r28
 37e:	1f 91       	pop	r17
 380:	0f 91       	pop	r16
 382:	08 95       	ret

00000384 <ILI9225_init>:

 #define ILI9225_WRITE_BYTE(c)	do {SPDR = c; while(!(SPSR & (1<<SPIF)));} while (0)

 void ILI9225_init(void) {
	//Ports
	ILI9225_RS_DDR	|= _BV(ILI9225_RS_BIT);
 384:	21 9a       	sbi	0x04, 1	; 4
	ILI9225_CS_DDR	|= _BV(ILI9225_CS_BIT);
 386:	22 9a       	sbi	0x04, 2	; 4
	ILI9225_LED_DDR	|= _BV(ILI9225_LED_BIT);	
 388:	53 9a       	sbi	0x0a, 3	; 10
	ILI9225_CLK_DDR	|= _BV(ILI9225_CLK_BIT);
 38a:	25 9a       	sbi	0x04, 5	; 4
	ILI9225_SDI_DDR	|= _BV(ILI9225_SDI_BIT);
 38c:	23 9a       	sbi	0x04, 3	; 4

	//SPI-Init
	ILI9225_LED_ON();
 38e:	5b 9a       	sbi	0x0b, 3	; 11

	//SPI
	SPCR |= _BV(SPE) | _BV(MSTR) ; //SPI Enabel, Master Mode, CLK/4
 390:	8c b5       	in	r24, 0x2c	; 44
 392:	80 65       	ori	r24, 0x50	; 80
 394:	8c bd       	out	0x2c, r24	; 44
	SPSR |= _BV(SPI2X);	//Double Speed --> Clk/2 = Max
 396:	8d b5       	in	r24, 0x2d	; 45
 398:	81 60       	ori	r24, 0x01	; 1
 39a:	8d bd       	out	0x2d, r24	; 45
	SPDR = 0;	//Dummy write
 39c:	1e bc       	out	0x2e, r1	; 46


	/* Start Initial Sequence */
	/* Set SS bit and direction output from S528 to S1 */
	_writeRegister(ILI9225_POWER_CTRL1, 0x0000); // Set SAP,DSTB,STB
 39e:	60 e0       	ldi	r22, 0x00	; 0
 3a0:	70 e0       	ldi	r23, 0x00	; 0
 3a2:	80 e1       	ldi	r24, 0x10	; 16
 3a4:	90 e0       	ldi	r25, 0x00	; 0
 3a6:	0e 94 60 00 	call	0xc0	; 0xc0 <_writeRegister>
	_writeRegister(ILI9225_POWER_CTRL2, 0x0000); // Set APON,PON,AON,VCI1EN,VC
 3aa:	60 e0       	ldi	r22, 0x00	; 0
 3ac:	70 e0       	ldi	r23, 0x00	; 0
 3ae:	81 e1       	ldi	r24, 0x11	; 17
 3b0:	90 e0       	ldi	r25, 0x00	; 0
 3b2:	0e 94 60 00 	call	0xc0	; 0xc0 <_writeRegister>
	_writeRegister(ILI9225_POWER_CTRL3, 0x0000); // Set BT,DC1,DC2,DC3
 3b6:	60 e0       	ldi	r22, 0x00	; 0
 3b8:	70 e0       	ldi	r23, 0x00	; 0
 3ba:	82 e1       	ldi	r24, 0x12	; 18
 3bc:	90 e0       	ldi	r25, 0x00	; 0
 3be:	0e 94 60 00 	call	0xc0	; 0xc0 <_writeRegister>
	_writeRegister(ILI9225_POWER_CTRL4, 0x0000); // Set GVDD
 3c2:	60 e0       	ldi	r22, 0x00	; 0
 3c4:	70 e0       	ldi	r23, 0x00	; 0
 3c6:	83 e1       	ldi	r24, 0x13	; 19
 3c8:	90 e0       	ldi	r25, 0x00	; 0
 3ca:	0e 94 60 00 	call	0xc0	; 0xc0 <_writeRegister>
	_writeRegister(ILI9225_POWER_CTRL5, 0x0000); // Set VCOMH/VCOML voltage
 3ce:	60 e0       	ldi	r22, 0x00	; 0
 3d0:	70 e0       	ldi	r23, 0x00	; 0
 3d2:	84 e1       	ldi	r24, 0x14	; 20
 3d4:	90 e0       	ldi	r25, 0x00	; 0
 3d6:	0e 94 60 00 	call	0xc0	; 0xc0 <_writeRegister>
 3da:	2f ef       	ldi	r18, 0xFF	; 255
 3dc:	86 e7       	ldi	r24, 0x76	; 118
 3de:	91 e0       	ldi	r25, 0x01	; 1
 3e0:	21 50       	subi	r18, 0x01	; 1
 3e2:	80 40       	sbci	r24, 0x00	; 0
 3e4:	90 40       	sbci	r25, 0x00	; 0
 3e6:	e1 f7       	brne	.-8      	; 0x3e0 <ILI9225_init+0x5c>
 3e8:	00 c0       	rjmp	.+0      	; 0x3ea <ILI9225_init+0x66>
 3ea:	00 00       	nop
	_delay_ms(40);

	// Power-on sequence
	_writeRegister(ILI9225_POWER_CTRL2, 0x0018); // Set APON,PON,AON,VCI1EN,VC
 3ec:	68 e1       	ldi	r22, 0x18	; 24
 3ee:	70 e0       	ldi	r23, 0x00	; 0
 3f0:	81 e1       	ldi	r24, 0x11	; 17
 3f2:	90 e0       	ldi	r25, 0x00	; 0
 3f4:	0e 94 60 00 	call	0xc0	; 0xc0 <_writeRegister>
	_writeRegister(ILI9225_POWER_CTRL3, 0x6121); // Set BT,DC1,DC2,DC3
 3f8:	61 e2       	ldi	r22, 0x21	; 33
 3fa:	71 e6       	ldi	r23, 0x61	; 97
 3fc:	82 e1       	ldi	r24, 0x12	; 18
 3fe:	90 e0       	ldi	r25, 0x00	; 0
 400:	0e 94 60 00 	call	0xc0	; 0xc0 <_writeRegister>
	_writeRegister(ILI9225_POWER_CTRL4, 0x006F); // Set GVDD   /*007F 0088 */
 404:	6f e6       	ldi	r22, 0x6F	; 111
 406:	70 e0       	ldi	r23, 0x00	; 0
 408:	83 e1       	ldi	r24, 0x13	; 19
 40a:	90 e0       	ldi	r25, 0x00	; 0
 40c:	0e 94 60 00 	call	0xc0	; 0xc0 <_writeRegister>
	_writeRegister(ILI9225_POWER_CTRL5, 0x495F); // Set VCOMH/VCOML voltage
 410:	6f e5       	ldi	r22, 0x5F	; 95
 412:	79 e4       	ldi	r23, 0x49	; 73
 414:	84 e1       	ldi	r24, 0x14	; 20
 416:	90 e0       	ldi	r25, 0x00	; 0
 418:	0e 94 60 00 	call	0xc0	; 0xc0 <_writeRegister>
	_writeRegister(ILI9225_POWER_CTRL1, 0x0800); // Set SAP,DSTB,STB
 41c:	60 e0       	ldi	r22, 0x00	; 0
 41e:	78 e0       	ldi	r23, 0x08	; 8
 420:	80 e1       	ldi	r24, 0x10	; 16
 422:	90 e0       	ldi	r25, 0x00	; 0
 424:	0e 94 60 00 	call	0xc0	; 0xc0 <_writeRegister>
 428:	8f e2       	ldi	r24, 0x2F	; 47
 42a:	95 e7       	ldi	r25, 0x75	; 117
 42c:	01 97       	sbiw	r24, 0x01	; 1
 42e:	f1 f7       	brne	.-4      	; 0x42c <ILI9225_init+0xa8>
 430:	00 c0       	rjmp	.+0      	; 0x432 <ILI9225_init+0xae>
 432:	00 00       	nop
	_delay_ms(10);
	_writeRegister(ILI9225_POWER_CTRL2, 0x103B); // Set APON,PON,AON,VCI1EN,VC
 434:	6b e3       	ldi	r22, 0x3B	; 59
 436:	70 e1       	ldi	r23, 0x10	; 16
 438:	81 e1       	ldi	r24, 0x11	; 17
 43a:	90 e0       	ldi	r25, 0x00	; 0
 43c:	0e 94 60 00 	call	0xc0	; 0xc0 <_writeRegister>
 440:	9f eb       	ldi	r25, 0xBF	; 191
 442:	24 ed       	ldi	r18, 0xD4	; 212
 444:	81 e0       	ldi	r24, 0x01	; 1
 446:	91 50       	subi	r25, 0x01	; 1
 448:	20 40       	sbci	r18, 0x00	; 0
 44a:	80 40       	sbci	r24, 0x00	; 0
 44c:	e1 f7       	brne	.-8      	; 0x446 <ILI9225_init+0xc2>
 44e:	00 c0       	rjmp	.+0      	; 0x450 <ILI9225_init+0xcc>
 450:	00 00       	nop
	_delay_ms(50);

	_writeRegister(ILI9225_DRIVER_OUTPUT_CTRL, 0x011C); // set the display line number and display direction
 452:	6c e1       	ldi	r22, 0x1C	; 28
 454:	71 e0       	ldi	r23, 0x01	; 1
 456:	81 e0       	ldi	r24, 0x01	; 1
 458:	90 e0       	ldi	r25, 0x00	; 0
 45a:	0e 94 60 00 	call	0xc0	; 0xc0 <_writeRegister>
	_writeRegister(ILI9225_LCD_AC_DRIVING_CTRL, 0x0100); // set 1 line inversion
 45e:	60 e0       	ldi	r22, 0x00	; 0
 460:	71 e0       	ldi	r23, 0x01	; 1
 462:	82 e0       	ldi	r24, 0x02	; 2
 464:	90 e0       	ldi	r25, 0x00	; 0
 466:	0e 94 60 00 	call	0xc0	; 0xc0 <_writeRegister>
	_writeRegister(ILI9225_ENTRY_MODE, 0x1030); // set GRAM write direction and BGR=1.
 46a:	60 e3       	ldi	r22, 0x30	; 48
 46c:	70 e1       	ldi	r23, 0x10	; 16
 46e:	83 e0       	ldi	r24, 0x03	; 3
 470:	90 e0       	ldi	r25, 0x00	; 0
 472:	0e 94 60 00 	call	0xc0	; 0xc0 <_writeRegister>
	_writeRegister(ILI9225_DISP_CTRL1, 0x0000); // Display off
 476:	60 e0       	ldi	r22, 0x00	; 0
 478:	70 e0       	ldi	r23, 0x00	; 0
 47a:	87 e0       	ldi	r24, 0x07	; 7
 47c:	90 e0       	ldi	r25, 0x00	; 0
 47e:	0e 94 60 00 	call	0xc0	; 0xc0 <_writeRegister>
	_writeRegister(ILI9225_BLANK_PERIOD_CTRL1, 0x0808); // set the back porch and front porch
 482:	68 e0       	ldi	r22, 0x08	; 8
 484:	78 e0       	ldi	r23, 0x08	; 8
 486:	88 e0       	ldi	r24, 0x08	; 8
 488:	90 e0       	ldi	r25, 0x00	; 0
 48a:	0e 94 60 00 	call	0xc0	; 0xc0 <_writeRegister>
	_writeRegister(ILI9225_FRAME_CYCLE_CTRL, 0x1100); // set the clocks number per line
 48e:	60 e0       	ldi	r22, 0x00	; 0
 490:	71 e1       	ldi	r23, 0x11	; 17
 492:	8b e0       	ldi	r24, 0x0B	; 11
 494:	90 e0       	ldi	r25, 0x00	; 0
 496:	0e 94 60 00 	call	0xc0	; 0xc0 <_writeRegister>
	_writeRegister(ILI9225_INTERFACE_CTRL, 0x0000); // CPU interface
 49a:	60 e0       	ldi	r22, 0x00	; 0
 49c:	70 e0       	ldi	r23, 0x00	; 0
 49e:	8c e0       	ldi	r24, 0x0C	; 12
 4a0:	90 e0       	ldi	r25, 0x00	; 0
 4a2:	0e 94 60 00 	call	0xc0	; 0xc0 <_writeRegister>
	_writeRegister(ILI9225_OSC_CTRL, 0x0D01); // Set Osc  /*0e01*/
 4a6:	61 e0       	ldi	r22, 0x01	; 1
 4a8:	7d e0       	ldi	r23, 0x0D	; 13
 4aa:	8f e0       	ldi	r24, 0x0F	; 15
 4ac:	90 e0       	ldi	r25, 0x00	; 0
 4ae:	0e 94 60 00 	call	0xc0	; 0xc0 <_writeRegister>
	_writeRegister(ILI9225_VCI_RECYCLING, 0x0020); // Set VCI recycling
 4b2:	60 e2       	ldi	r22, 0x20	; 32
 4b4:	70 e0       	ldi	r23, 0x00	; 0
 4b6:	85 e1       	ldi	r24, 0x15	; 21
 4b8:	90 e0       	ldi	r25, 0x00	; 0
 4ba:	0e 94 60 00 	call	0xc0	; 0xc0 <_writeRegister>
	_writeRegister(ILI9225_RAM_ADDR_SET1, 0x0000); // RAM Address
 4be:	60 e0       	ldi	r22, 0x00	; 0
 4c0:	70 e0       	ldi	r23, 0x00	; 0
 4c2:	80 e2       	ldi	r24, 0x20	; 32
 4c4:	90 e0       	ldi	r25, 0x00	; 0
 4c6:	0e 94 60 00 	call	0xc0	; 0xc0 <_writeRegister>
	_writeRegister(ILI9225_RAM_ADDR_SET2, 0x0000); // RAM Address
 4ca:	60 e0       	ldi	r22, 0x00	; 0
 4cc:	70 e0       	ldi	r23, 0x00	; 0
 4ce:	81 e2       	ldi	r24, 0x21	; 33
 4d0:	90 e0       	ldi	r25, 0x00	; 0
 4d2:	0e 94 60 00 	call	0xc0	; 0xc0 <_writeRegister>

	/* Set GRAM area */
	_writeRegister(ILI9225_GATE_SCAN_CTRL, 0x0000);
 4d6:	60 e0       	ldi	r22, 0x00	; 0
 4d8:	70 e0       	ldi	r23, 0x00	; 0
 4da:	80 e3       	ldi	r24, 0x30	; 48
 4dc:	90 e0       	ldi	r25, 0x00	; 0
 4de:	0e 94 60 00 	call	0xc0	; 0xc0 <_writeRegister>
	_writeRegister(ILI9225_VERTICAL_SCROLL_CTRL1, 0x00DB);
 4e2:	6b ed       	ldi	r22, 0xDB	; 219
 4e4:	70 e0       	ldi	r23, 0x00	; 0
 4e6:	81 e3       	ldi	r24, 0x31	; 49
 4e8:	90 e0       	ldi	r25, 0x00	; 0
 4ea:	0e 94 60 00 	call	0xc0	; 0xc0 <_writeRegister>
	_writeRegister(ILI9225_VERTICAL_SCROLL_CTRL2, 0x0000);
 4ee:	60 e0       	ldi	r22, 0x00	; 0
 4f0:	70 e0       	ldi	r23, 0x00	; 0
 4f2:	82 e3       	ldi	r24, 0x32	; 50
 4f4:	90 e0       	ldi	r25, 0x00	; 0
 4f6:	0e 94 60 00 	call	0xc0	; 0xc0 <_writeRegister>
	_writeRegister(ILI9225_VERTICAL_SCROLL_CTRL3, 0x0000);
 4fa:	60 e0       	ldi	r22, 0x00	; 0
 4fc:	70 e0       	ldi	r23, 0x00	; 0
 4fe:	83 e3       	ldi	r24, 0x33	; 51
 500:	90 e0       	ldi	r25, 0x00	; 0
 502:	0e 94 60 00 	call	0xc0	; 0xc0 <_writeRegister>
	_writeRegister(ILI9225_PARTIAL_DRIVING_POS1, 0x00DB);
 506:	6b ed       	ldi	r22, 0xDB	; 219
 508:	70 e0       	ldi	r23, 0x00	; 0
 50a:	84 e3       	ldi	r24, 0x34	; 52
 50c:	90 e0       	ldi	r25, 0x00	; 0
 50e:	0e 94 60 00 	call	0xc0	; 0xc0 <_writeRegister>
	_writeRegister(ILI9225_PARTIAL_DRIVING_POS2, 0x0000);
 512:	60 e0       	ldi	r22, 0x00	; 0
 514:	70 e0       	ldi	r23, 0x00	; 0
 516:	85 e3       	ldi	r24, 0x35	; 53
 518:	90 e0       	ldi	r25, 0x00	; 0
 51a:	0e 94 60 00 	call	0xc0	; 0xc0 <_writeRegister>
	_writeRegister(ILI9225_HORIZONTAL_WINDOW_ADDR1, 0x00AF);
 51e:	6f ea       	ldi	r22, 0xAF	; 175
 520:	70 e0       	ldi	r23, 0x00	; 0
 522:	86 e3       	ldi	r24, 0x36	; 54
 524:	90 e0       	ldi	r25, 0x00	; 0
 526:	0e 94 60 00 	call	0xc0	; 0xc0 <_writeRegister>
	_writeRegister(ILI9225_HORIZONTAL_WINDOW_ADDR2, 0x0000);
 52a:	60 e0       	ldi	r22, 0x00	; 0
 52c:	70 e0       	ldi	r23, 0x00	; 0
 52e:	87 e3       	ldi	r24, 0x37	; 55
 530:	90 e0       	ldi	r25, 0x00	; 0
 532:	0e 94 60 00 	call	0xc0	; 0xc0 <_writeRegister>
	_writeRegister(ILI9225_VERTICAL_WINDOW_ADDR1, 0x00DB);
 536:	6b ed       	ldi	r22, 0xDB	; 219
 538:	70 e0       	ldi	r23, 0x00	; 0
 53a:	88 e3       	ldi	r24, 0x38	; 56
 53c:	90 e0       	ldi	r25, 0x00	; 0
 53e:	0e 94 60 00 	call	0xc0	; 0xc0 <_writeRegister>
	_writeRegister(ILI9225_VERTICAL_WINDOW_ADDR2, 0x0000);
 542:	60 e0       	ldi	r22, 0x00	; 0
 544:	70 e0       	ldi	r23, 0x00	; 0
 546:	89 e3       	ldi	r24, 0x39	; 57
 548:	90 e0       	ldi	r25, 0x00	; 0
 54a:	0e 94 60 00 	call	0xc0	; 0xc0 <_writeRegister>

	/* Set GAMMA curve */
	_writeRegister(ILI9225_GAMMA_CTRL1, 0x0000);
 54e:	60 e0       	ldi	r22, 0x00	; 0
 550:	70 e0       	ldi	r23, 0x00	; 0
 552:	80 e5       	ldi	r24, 0x50	; 80
 554:	90 e0       	ldi	r25, 0x00	; 0
 556:	0e 94 60 00 	call	0xc0	; 0xc0 <_writeRegister>
	_writeRegister(ILI9225_GAMMA_CTRL2, 0x0808);
 55a:	68 e0       	ldi	r22, 0x08	; 8
 55c:	78 e0       	ldi	r23, 0x08	; 8
 55e:	81 e5       	ldi	r24, 0x51	; 81
 560:	90 e0       	ldi	r25, 0x00	; 0
 562:	0e 94 60 00 	call	0xc0	; 0xc0 <_writeRegister>
	_writeRegister(ILI9225_GAMMA_CTRL3, 0x080A);
 566:	6a e0       	ldi	r22, 0x0A	; 10
 568:	78 e0       	ldi	r23, 0x08	; 8
 56a:	82 e5       	ldi	r24, 0x52	; 82
 56c:	90 e0       	ldi	r25, 0x00	; 0
 56e:	0e 94 60 00 	call	0xc0	; 0xc0 <_writeRegister>
	_writeRegister(ILI9225_GAMMA_CTRL4, 0x000A);
 572:	6a e0       	ldi	r22, 0x0A	; 10
 574:	70 e0       	ldi	r23, 0x00	; 0
 576:	83 e5       	ldi	r24, 0x53	; 83
 578:	90 e0       	ldi	r25, 0x00	; 0
 57a:	0e 94 60 00 	call	0xc0	; 0xc0 <_writeRegister>
	_writeRegister(ILI9225_GAMMA_CTRL5, 0x0A08);
 57e:	68 e0       	ldi	r22, 0x08	; 8
 580:	7a e0       	ldi	r23, 0x0A	; 10
 582:	84 e5       	ldi	r24, 0x54	; 84
 584:	90 e0       	ldi	r25, 0x00	; 0
 586:	0e 94 60 00 	call	0xc0	; 0xc0 <_writeRegister>
	_writeRegister(ILI9225_GAMMA_CTRL6, 0x0808);
 58a:	68 e0       	ldi	r22, 0x08	; 8
 58c:	78 e0       	ldi	r23, 0x08	; 8
 58e:	85 e5       	ldi	r24, 0x55	; 85
 590:	90 e0       	ldi	r25, 0x00	; 0
 592:	0e 94 60 00 	call	0xc0	; 0xc0 <_writeRegister>
	_writeRegister(ILI9225_GAMMA_CTRL7, 0x0000);
 596:	60 e0       	ldi	r22, 0x00	; 0
 598:	70 e0       	ldi	r23, 0x00	; 0
 59a:	86 e5       	ldi	r24, 0x56	; 86
 59c:	90 e0       	ldi	r25, 0x00	; 0
 59e:	0e 94 60 00 	call	0xc0	; 0xc0 <_writeRegister>
	_writeRegister(ILI9225_GAMMA_CTRL8, 0x0A00);
 5a2:	60 e0       	ldi	r22, 0x00	; 0
 5a4:	7a e0       	ldi	r23, 0x0A	; 10
 5a6:	87 e5       	ldi	r24, 0x57	; 87
 5a8:	90 e0       	ldi	r25, 0x00	; 0
 5aa:	0e 94 60 00 	call	0xc0	; 0xc0 <_writeRegister>
	_writeRegister(ILI9225_GAMMA_CTRL9, 0x0710);
 5ae:	60 e1       	ldi	r22, 0x10	; 16
 5b0:	77 e0       	ldi	r23, 0x07	; 7
 5b2:	88 e5       	ldi	r24, 0x58	; 88
 5b4:	90 e0       	ldi	r25, 0x00	; 0
 5b6:	0e 94 60 00 	call	0xc0	; 0xc0 <_writeRegister>
	_writeRegister(ILI9225_GAMMA_CTRL10, 0x0710);
 5ba:	60 e1       	ldi	r22, 0x10	; 16
 5bc:	77 e0       	ldi	r23, 0x07	; 7
 5be:	89 e5       	ldi	r24, 0x59	; 89
 5c0:	90 e0       	ldi	r25, 0x00	; 0
 5c2:	0e 94 60 00 	call	0xc0	; 0xc0 <_writeRegister>

	_writeRegister(ILI9225_DISP_CTRL1, 0x0012);
 5c6:	62 e1       	ldi	r22, 0x12	; 18
 5c8:	70 e0       	ldi	r23, 0x00	; 0
 5ca:	87 e0       	ldi	r24, 0x07	; 7
 5cc:	90 e0       	ldi	r25, 0x00	; 0
 5ce:	0e 94 60 00 	call	0xc0	; 0xc0 <_writeRegister>
 5d2:	9f eb       	ldi	r25, 0xBF	; 191
 5d4:	24 ed       	ldi	r18, 0xD4	; 212
 5d6:	81 e0       	ldi	r24, 0x01	; 1
 5d8:	91 50       	subi	r25, 0x01	; 1
 5da:	20 40       	sbci	r18, 0x00	; 0
 5dc:	80 40       	sbci	r24, 0x00	; 0
 5de:	e1 f7       	brne	.-8      	; 0x5d8 <ILI9225_init+0x254>
 5e0:	00 c0       	rjmp	.+0      	; 0x5e2 <ILI9225_init+0x25e>
 5e2:	00 00       	nop
	_delay_ms(50);
	_writeRegister(ILI9225_DISP_CTRL1, 0x1017);
 5e4:	67 e1       	ldi	r22, 0x17	; 23
 5e6:	70 e1       	ldi	r23, 0x10	; 16
 5e8:	87 e0       	ldi	r24, 0x07	; 7
 5ea:	90 e0       	ldi	r25, 0x00	; 0
 5ec:	0e 94 60 00 	call	0xc0	; 0xc0 <_writeRegister>

	ILI9225_setBacklight(1);
 5f0:	81 e0       	ldi	r24, 0x01	; 1
 5f2:	0e 94 21 01 	call	0x242	; 0x242 <ILI9225_setBacklight>
	ILI9225_setOrientation(0);
 5f6:	80 e0       	ldi	r24, 0x00	; 0
 5f8:	0e 94 27 01 	call	0x24e	; 0x24e <ILI9225_setOrientation>
	}
}


void ILI9225_setBackgroundColor(uint16_t color) {
	_bgColor = color;
 5fc:	10 92 02 01 	sts	0x0102, r1
 600:	10 92 01 01 	sts	0x0101, r1
	ILI9225_setOrientation(0);

	// Initialize variables
	ILI9225_setBackgroundColor( COLOR_BLACK );

	ILI9225_clear();
 604:	0e 94 99 01 	call	0x332	; 0x332 <ILI9225_clear>
 608:	08 95       	ret

0000060a <ILI9225_drawPixel>:
			 err += dx;
		 }
	 }
 }

 void ILI9225_drawPixel(uint16_t x1, uint16_t y1, uint16_t color) {
 60a:	0f 93       	push	r16
 60c:	1f 93       	push	r17
 60e:	cf 93       	push	r28
 610:	df 93       	push	r29
 612:	00 d0       	rcall	.+0      	; 0x614 <ILI9225_drawPixel+0xa>
 614:	00 d0       	rcall	.+0      	; 0x616 <ILI9225_drawPixel+0xc>
 616:	cd b7       	in	r28, 0x3d	; 61
 618:	de b7       	in	r29, 0x3e	; 62
 61a:	9a 83       	std	Y+2, r25	; 0x02
 61c:	89 83       	std	Y+1, r24	; 0x01
 61e:	7c 83       	std	Y+4, r23	; 0x04
 620:	6b 83       	std	Y+3, r22	; 0x03

	 if((x1 < 0) || (x1 >= _maxX) || (y1 < 0) || (y1 >= _maxY)) return;
 622:	20 91 03 01 	lds	r18, 0x0103
 626:	30 91 04 01 	lds	r19, 0x0104
 62a:	82 17       	cp	r24, r18
 62c:	93 07       	cpc	r25, r19
 62e:	e0 f4       	brcc	.+56     	; 0x668 <ILI9225_drawPixel+0x5e>
 630:	20 91 05 01 	lds	r18, 0x0105
 634:	30 91 06 01 	lds	r19, 0x0106
 638:	62 17       	cp	r22, r18
 63a:	73 07       	cpc	r23, r19
 63c:	a8 f4       	brcc	.+42     	; 0x668 <ILI9225_drawPixel+0x5e>
 63e:	15 2f       	mov	r17, r21
 640:	04 2f       	mov	r16, r20

	 ILI9225_setWindow(x1, y1, x1+1, y1+1);
 642:	9b 01       	movw	r18, r22
 644:	2f 5f       	subi	r18, 0xFF	; 255
 646:	3f 4f       	sbci	r19, 0xFF	; 255
 648:	ac 01       	movw	r20, r24
 64a:	4f 5f       	subi	r20, 0xFF	; 255
 64c:	5f 4f       	sbci	r21, 0xFF	; 255
 64e:	0e 94 ba 00 	call	0x174	; 0x174 <ILI9225_setWindow>
	 _orientCoordinates(&x1, &y1);
 652:	be 01       	movw	r22, r28
 654:	6d 5f       	subi	r22, 0xFD	; 253
 656:	7f 4f       	sbci	r23, 0xFF	; 255
 658:	ce 01       	movw	r24, r28
 65a:	01 96       	adiw	r24, 0x01	; 1
 65c:	0e 94 6f 00 	call	0xde	; 0xde <_orientCoordinates>
	 _writeData(color >> 8, color);
 660:	60 2f       	mov	r22, r16
 662:	81 2f       	mov	r24, r17
 664:	0e 94 54 00 	call	0xa8	; 0xa8 <_writeData>
 }
 668:	0f 90       	pop	r0
 66a:	0f 90       	pop	r0
 66c:	0f 90       	pop	r0
 66e:	0f 90       	pop	r0
 670:	df 91       	pop	r29
 672:	cf 91       	pop	r28
 674:	1f 91       	pop	r17
 676:	0f 91       	pop	r16
 678:	08 95       	ret

0000067a <ILI9225_drawCircle>:

	 for(uint16_t t=(y2 - y1 + 1) * (x2 - x1 + 1); t > 0; t--)
	 _writeData(color >> 8, color);
 }
 
 void ILI9225_drawCircle(uint16_t x0, uint16_t y0, uint16_t r, uint16_t color) {
 67a:	2f 92       	push	r2
 67c:	3f 92       	push	r3
 67e:	4f 92       	push	r4
 680:	5f 92       	push	r5
 682:	6f 92       	push	r6
 684:	7f 92       	push	r7
 686:	8f 92       	push	r8
 688:	9f 92       	push	r9
 68a:	af 92       	push	r10
 68c:	bf 92       	push	r11
 68e:	cf 92       	push	r12
 690:	df 92       	push	r13
 692:	ef 92       	push	r14
 694:	ff 92       	push	r15
 696:	0f 93       	push	r16
 698:	1f 93       	push	r17
 69a:	cf 93       	push	r28
 69c:	df 93       	push	r29
 69e:	00 d0       	rcall	.+0      	; 0x6a0 <ILI9225_drawCircle+0x26>
 6a0:	00 d0       	rcall	.+0      	; 0x6a2 <ILI9225_drawCircle+0x28>
 6a2:	00 d0       	rcall	.+0      	; 0x6a4 <ILI9225_drawCircle+0x2a>
 6a4:	cd b7       	in	r28, 0x3d	; 61
 6a6:	de b7       	in	r29, 0x3e	; 62
 6a8:	6c 01       	movw	r12, r24
 6aa:	4b 01       	movw	r8, r22
 6ac:	5a 01       	movw	r10, r20
 6ae:	3c 83       	std	Y+4, r19	; 0x04
 6b0:	2b 83       	std	Y+3, r18	; 0x03

	 int16_t f = 1 - r;
 6b2:	81 e0       	ldi	r24, 0x01	; 1
 6b4:	90 e0       	ldi	r25, 0x00	; 0
 6b6:	7c 01       	movw	r14, r24
 6b8:	e4 1a       	sub	r14, r20
 6ba:	f5 0a       	sbc	r15, r21
	 int16_t ddF_x = 1;
	 int16_t ddF_y = -2 * r;
 6bc:	22 24       	eor	r2, r2
 6be:	33 24       	eor	r3, r3
 6c0:	24 1a       	sub	r2, r20
 6c2:	35 0a       	sbc	r3, r21
 6c4:	22 0c       	add	r2, r2
 6c6:	33 1c       	adc	r3, r3
	 int16_t x = 0;
	 int16_t y = r;
 6c8:	8a 01       	movw	r16, r20

	 ILI9225_drawPixel(x0, y0 + r, color);
 6ca:	ba 01       	movw	r22, r20
 6cc:	68 0d       	add	r22, r8
 6ce:	79 1d       	adc	r23, r9
 6d0:	a9 01       	movw	r20, r18
 6d2:	c6 01       	movw	r24, r12
 6d4:	0e 94 05 03 	call	0x60a	; 0x60a <ILI9225_drawPixel>
	 ILI9225_drawPixel(x0, y0-  r, color);
 6d8:	b4 01       	movw	r22, r8
 6da:	6a 19       	sub	r22, r10
 6dc:	7b 09       	sbc	r23, r11
 6de:	4b 81       	ldd	r20, Y+3	; 0x03
 6e0:	5c 81       	ldd	r21, Y+4	; 0x04
 6e2:	c6 01       	movw	r24, r12
 6e4:	0e 94 05 03 	call	0x60a	; 0x60a <ILI9225_drawPixel>
	 ILI9225_drawPixel(x0 + r, y0, color);
 6e8:	4b 81       	ldd	r20, Y+3	; 0x03
 6ea:	5c 81       	ldd	r21, Y+4	; 0x04
 6ec:	b4 01       	movw	r22, r8
 6ee:	c5 01       	movw	r24, r10
 6f0:	8c 0d       	add	r24, r12
 6f2:	9d 1d       	adc	r25, r13
 6f4:	0e 94 05 03 	call	0x60a	; 0x60a <ILI9225_drawPixel>
	 ILI9225_drawPixel(x0 - r, y0, color);
 6f8:	4b 81       	ldd	r20, Y+3	; 0x03
 6fa:	5c 81       	ldd	r21, Y+4	; 0x04
 6fc:	b4 01       	movw	r22, r8
 6fe:	c6 01       	movw	r24, r12
 700:	8a 19       	sub	r24, r10
 702:	9b 09       	sbc	r25, r11
 704:	0e 94 05 03 	call	0x60a	; 0x60a <ILI9225_drawPixel>

	 while (x<y) {
 708:	1a 14       	cp	r1, r10
 70a:	1b 04       	cpc	r1, r11
 70c:	0c f0       	brlt	.+2      	; 0x710 <ILI9225_drawCircle+0x96>
 70e:	75 c0       	rjmp	.+234    	; 0x7fa <ILI9225_drawCircle+0x180>
 710:	1e 82       	std	Y+6, r1	; 0x06
 712:	1d 82       	std	Y+5, r1	; 0x05
 714:	66 24       	eor	r6, r6
 716:	63 94       	inc	r6
 718:	71 2c       	mov	r7, r1
		 if (f >= 0) {
 71a:	ff 20       	and	r15, r15
 71c:	3c f0       	brlt	.+14     	; 0x72c <ILI9225_drawCircle+0xb2>
			 y--;
 71e:	01 50       	subi	r16, 0x01	; 1
 720:	11 09       	sbc	r17, r1
			 ddF_y += 2;
 722:	82 e0       	ldi	r24, 0x02	; 2
 724:	28 0e       	add	r2, r24
 726:	31 1c       	adc	r3, r1
			 f += ddF_y;
 728:	e2 0c       	add	r14, r2
 72a:	f3 1c       	adc	r15, r3
		 }
		 x++;
 72c:	ed 81       	ldd	r30, Y+5	; 0x05
 72e:	fe 81       	ldd	r31, Y+6	; 0x06
 730:	31 96       	adiw	r30, 0x01	; 1
 732:	fe 83       	std	Y+6, r31	; 0x06
 734:	ed 83       	std	Y+5, r30	; 0x05
		 ddF_x += 2;
 736:	f2 e0       	ldi	r31, 0x02	; 2
 738:	6f 0e       	add	r6, r31
 73a:	71 1c       	adc	r7, r1
		 f += ddF_x;
 73c:	e6 0c       	add	r14, r6
 73e:	f7 1c       	adc	r15, r7
 740:	ad 80       	ldd	r10, Y+5	; 0x05
 742:	be 80       	ldd	r11, Y+6	; 0x06
 744:	ac 0c       	add	r10, r12
 746:	bd 1c       	adc	r11, r13

		 ILI9225_drawPixel(x0 + x, y0 + y, color);
 748:	4b 81       	ldd	r20, Y+3	; 0x03
 74a:	5c 81       	ldd	r21, Y+4	; 0x04
 74c:	c8 01       	movw	r24, r16
 74e:	88 0d       	add	r24, r8
 750:	99 1d       	adc	r25, r9
 752:	9a 83       	std	Y+2, r25	; 0x02
 754:	89 83       	std	Y+1, r24	; 0x01
 756:	bc 01       	movw	r22, r24
 758:	c5 01       	movw	r24, r10
 75a:	0e 94 05 03 	call	0x60a	; 0x60a <ILI9225_drawPixel>
 75e:	26 01       	movw	r4, r12
 760:	ed 81       	ldd	r30, Y+5	; 0x05
 762:	fe 81       	ldd	r31, Y+6	; 0x06
 764:	4e 1a       	sub	r4, r30
 766:	5f 0a       	sbc	r5, r31
		 ILI9225_drawPixel(x0 - x, y0 + y, color);
 768:	4b 81       	ldd	r20, Y+3	; 0x03
 76a:	5c 81       	ldd	r21, Y+4	; 0x04
 76c:	69 81       	ldd	r22, Y+1	; 0x01
 76e:	7a 81       	ldd	r23, Y+2	; 0x02
 770:	c2 01       	movw	r24, r4
 772:	0e 94 05 03 	call	0x60a	; 0x60a <ILI9225_drawPixel>
		 ILI9225_drawPixel(x0 + x, y0 - y, color);
 776:	4b 81       	ldd	r20, Y+3	; 0x03
 778:	5c 81       	ldd	r21, Y+4	; 0x04
 77a:	c4 01       	movw	r24, r8
 77c:	80 1b       	sub	r24, r16
 77e:	91 0b       	sbc	r25, r17
 780:	9a 83       	std	Y+2, r25	; 0x02
 782:	89 83       	std	Y+1, r24	; 0x01
 784:	bc 01       	movw	r22, r24
 786:	c5 01       	movw	r24, r10
 788:	0e 94 05 03 	call	0x60a	; 0x60a <ILI9225_drawPixel>
		 ILI9225_drawPixel(x0 - x, y0 - y, color);
 78c:	4b 81       	ldd	r20, Y+3	; 0x03
 78e:	5c 81       	ldd	r21, Y+4	; 0x04
 790:	69 81       	ldd	r22, Y+1	; 0x01
 792:	7a 81       	ldd	r23, Y+2	; 0x02
 794:	c2 01       	movw	r24, r4
 796:	0e 94 05 03 	call	0x60a	; 0x60a <ILI9225_drawPixel>
 79a:	ad 80       	ldd	r10, Y+5	; 0x05
 79c:	be 80       	ldd	r11, Y+6	; 0x06
 79e:	a8 0c       	add	r10, r8
 7a0:	b9 1c       	adc	r11, r9
		 ILI9225_drawPixel(x0 + y, y0 + x, color);
 7a2:	4b 81       	ldd	r20, Y+3	; 0x03
 7a4:	5c 81       	ldd	r21, Y+4	; 0x04
 7a6:	b5 01       	movw	r22, r10
 7a8:	28 01       	movw	r4, r16
 7aa:	4c 0c       	add	r4, r12
 7ac:	5d 1c       	adc	r5, r13
 7ae:	c2 01       	movw	r24, r4
 7b0:	0e 94 05 03 	call	0x60a	; 0x60a <ILI9225_drawPixel>
		 ILI9225_drawPixel(x0 - y, y0 + x, color);
 7b4:	4b 81       	ldd	r20, Y+3	; 0x03
 7b6:	5c 81       	ldd	r21, Y+4	; 0x04
 7b8:	b5 01       	movw	r22, r10
 7ba:	f6 01       	movw	r30, r12
 7bc:	e0 1b       	sub	r30, r16
 7be:	f1 0b       	sbc	r31, r17
 7c0:	fa 83       	std	Y+2, r31	; 0x02
 7c2:	e9 83       	std	Y+1, r30	; 0x01
 7c4:	cf 01       	movw	r24, r30
 7c6:	0e 94 05 03 	call	0x60a	; 0x60a <ILI9225_drawPixel>
 7ca:	54 01       	movw	r10, r8
 7cc:	8d 81       	ldd	r24, Y+5	; 0x05
 7ce:	9e 81       	ldd	r25, Y+6	; 0x06
 7d0:	a8 1a       	sub	r10, r24
 7d2:	b9 0a       	sbc	r11, r25
		 ILI9225_drawPixel(x0 + y, y0 - x, color);
 7d4:	4b 81       	ldd	r20, Y+3	; 0x03
 7d6:	5c 81       	ldd	r21, Y+4	; 0x04
 7d8:	b5 01       	movw	r22, r10
 7da:	c2 01       	movw	r24, r4
 7dc:	0e 94 05 03 	call	0x60a	; 0x60a <ILI9225_drawPixel>
		 ILI9225_drawPixel(x0 - y, y0 - x, color);
 7e0:	4b 81       	ldd	r20, Y+3	; 0x03
 7e2:	5c 81       	ldd	r21, Y+4	; 0x04
 7e4:	b5 01       	movw	r22, r10
 7e6:	89 81       	ldd	r24, Y+1	; 0x01
 7e8:	9a 81       	ldd	r25, Y+2	; 0x02
 7ea:	0e 94 05 03 	call	0x60a	; 0x60a <ILI9225_drawPixel>
	 ILI9225_drawPixel(x0, y0 + r, color);
	 ILI9225_drawPixel(x0, y0-  r, color);
	 ILI9225_drawPixel(x0 + r, y0, color);
	 ILI9225_drawPixel(x0 - r, y0, color);

	 while (x<y) {
 7ee:	ed 81       	ldd	r30, Y+5	; 0x05
 7f0:	fe 81       	ldd	r31, Y+6	; 0x06
 7f2:	e0 17       	cp	r30, r16
 7f4:	f1 07       	cpc	r31, r17
 7f6:	0c f4       	brge	.+2      	; 0x7fa <ILI9225_drawCircle+0x180>
 7f8:	90 cf       	rjmp	.-224    	; 0x71a <ILI9225_drawCircle+0xa0>
		 ILI9225_drawPixel(x0 + y, y0 + x, color);
		 ILI9225_drawPixel(x0 - y, y0 + x, color);
		 ILI9225_drawPixel(x0 + y, y0 - x, color);
		 ILI9225_drawPixel(x0 - y, y0 - x, color);
	 }
 }
 7fa:	26 96       	adiw	r28, 0x06	; 6
 7fc:	0f b6       	in	r0, 0x3f	; 63
 7fe:	f8 94       	cli
 800:	de bf       	out	0x3e, r29	; 62
 802:	0f be       	out	0x3f, r0	; 63
 804:	cd bf       	out	0x3d, r28	; 61
 806:	df 91       	pop	r29
 808:	cf 91       	pop	r28
 80a:	1f 91       	pop	r17
 80c:	0f 91       	pop	r16
 80e:	ff 90       	pop	r15
 810:	ef 90       	pop	r14
 812:	df 90       	pop	r13
 814:	cf 90       	pop	r12
 816:	bf 90       	pop	r11
 818:	af 90       	pop	r10
 81a:	9f 90       	pop	r9
 81c:	8f 90       	pop	r8
 81e:	7f 90       	pop	r7
 820:	6f 90       	pop	r6
 822:	5f 90       	pop	r5
 824:	4f 90       	pop	r4
 826:	3f 90       	pop	r3
 828:	2f 90       	pop	r2
 82a:	08 95       	ret

0000082c <ILI9225_drawLine>:
	 }
	 ILI9225_fillRectangle(x0-x, y0-y, x0+x, y0+y, color);
 }

 
 void ILI9225_drawLine(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t color) {
 82c:	2f 92       	push	r2
 82e:	3f 92       	push	r3
 830:	4f 92       	push	r4
 832:	5f 92       	push	r5
 834:	6f 92       	push	r6
 836:	7f 92       	push	r7
 838:	8f 92       	push	r8
 83a:	9f 92       	push	r9
 83c:	af 92       	push	r10
 83e:	bf 92       	push	r11
 840:	cf 92       	push	r12
 842:	df 92       	push	r13
 844:	ef 92       	push	r14
 846:	ff 92       	push	r15
 848:	0f 93       	push	r16
 84a:	1f 93       	push	r17
 84c:	cf 93       	push	r28
 84e:	df 93       	push	r29
 850:	ec 01       	movw	r28, r24
 852:	7b 01       	movw	r14, r22
 854:	6a 01       	movw	r12, r20
 856:	18 01       	movw	r2, r16

	 // Classic Bresenham algorithm
	 int16_t steep = abs(y2 - y1) > abs(x2 - x1);
 858:	c9 01       	movw	r24, r18
 85a:	86 1b       	sub	r24, r22
 85c:	97 0b       	sbc	r25, r23
 85e:	ac 01       	movw	r20, r24
 860:	22 f4       	brpl	.+8      	; 0x86a <ILI9225_drawLine+0x3e>
 862:	44 27       	eor	r20, r20
 864:	55 27       	eor	r21, r21
 866:	48 1b       	sub	r20, r24
 868:	59 0b       	sbc	r21, r25
 86a:	b6 01       	movw	r22, r12
 86c:	6c 1b       	sub	r22, r28
 86e:	7d 0b       	sbc	r23, r29
 870:	cb 01       	movw	r24, r22
 872:	99 23       	and	r25, r25
 874:	24 f4       	brge	.+8      	; 0x87e <ILI9225_drawLine+0x52>
 876:	88 27       	eor	r24, r24
 878:	99 27       	eor	r25, r25
 87a:	86 1b       	sub	r24, r22
 87c:	97 0b       	sbc	r25, r23
 87e:	71 e0       	ldi	r23, 0x01	; 1
 880:	60 e0       	ldi	r22, 0x00	; 0
 882:	84 17       	cp	r24, r20
 884:	95 07       	cpc	r25, r21
 886:	0c f0       	brlt	.+2      	; 0x88a <ILI9225_drawLine+0x5e>
 888:	70 e0       	ldi	r23, 0x00	; 0
 88a:	a7 2e       	mov	r10, r23
 88c:	b6 2e       	mov	r11, r22
	 int16_t dx, dy;

	 if (steep) {
 88e:	a1 14       	cp	r10, r1
 890:	b1 04       	cpc	r11, r1
 892:	51 f0       	breq	.+20     	; 0x8a8 <ILI9225_drawLine+0x7c>
 894:	9c 2d       	mov	r25, r12
 896:	8d 2d       	mov	r24, r13
 	_writeCommand(reg >> 8, reg & 255);
 	_writeData(data >> 8, data & 255);
 }
 void _swap(uint16_t *a, uint16_t *b) {
	 uint16_t w = *a;
	 *a = *b;
 898:	69 01       	movw	r12, r18
	 *b = w;
 89a:	29 2f       	mov	r18, r25
 89c:	38 2f       	mov	r19, r24

	 // Classic Bresenham algorithm
	 int16_t steep = abs(y2 - y1) > abs(x2 - x1);
	 int16_t dx, dy;

	 if (steep) {
 89e:	9c 2f       	mov	r25, r28
 8a0:	8d 2f       	mov	r24, r29
 	_writeCommand(reg >> 8, reg & 255);
 	_writeData(data >> 8, data & 255);
 }
 void _swap(uint16_t *a, uint16_t *b) {
	 uint16_t w = *a;
	 *a = *b;
 8a2:	e7 01       	movw	r28, r14
	 *b = w;
 8a4:	e9 2e       	mov	r14, r25
 8a6:	f8 2e       	mov	r15, r24
	 if (steep) {
		 _swap(&x1, &y1);
		 _swap(&x2, &y2);
	 }

	 if (x1 > x2) {
 8a8:	cc 16       	cp	r12, r28
 8aa:	dd 06       	cpc	r13, r29
 8ac:	78 f5       	brcc	.+94     	; 0x90c <__stack+0xd>
 8ae:	9e 2d       	mov	r25, r14
 8b0:	8f 2d       	mov	r24, r15
 	_writeCommand(reg >> 8, reg & 255);
 	_writeData(data >> 8, data & 255);
 }
 void _swap(uint16_t *a, uint16_t *b) {
	 uint16_t w = *a;
	 *a = *b;
 8b2:	79 01       	movw	r14, r18
	 *b = w;
 8b4:	29 2f       	mov	r18, r25
 8b6:	38 2f       	mov	r19, r24
	 if (steep) {
		 _swap(&x1, &y1);
		 _swap(&x2, &y2);
	 }

	 if (x1 > x2) {
 8b8:	9c 2f       	mov	r25, r28
 8ba:	8d 2f       	mov	r24, r29
 	_writeCommand(reg >> 8, reg & 255);
 	_writeData(data >> 8, data & 255);
 }
 void _swap(uint16_t *a, uint16_t *b) {
	 uint16_t w = *a;
	 *a = *b;
 8bc:	e6 01       	movw	r28, r12
	 *b = w;
 8be:	c9 2e       	mov	r12, r25
 8c0:	d8 2e       	mov	r13, r24
 8c2:	24 c0       	rjmp	.+72     	; 0x90c <__stack+0xd>

	 if (y1 < y2) ystep = 1;
	 else ystep = -1;


	 for (; x1<=x2; x1++) {
 8c4:	cc 16       	cp	r12, r28
 8c6:	dd 06       	cpc	r13, r29
 8c8:	c8 f1       	brcs	.+114    	; 0x93c <__stack+0x3d>

	 int16_t err = dx / 2;
	 int16_t ystep;

	 if (y1 < y2) ystep = 1;
	 else ystep = -1;
 8ca:	66 24       	eor	r6, r6
 8cc:	6a 94       	dec	r6
 8ce:	76 2c       	mov	r7, r6
 8d0:	03 c0       	rjmp	.+6      	; 0x8d8 <ILI9225_drawLine+0xac>
	 dy = abs(y2 - y1);

	 int16_t err = dx / 2;
	 int16_t ystep;

	 if (y1 < y2) ystep = 1;
 8d2:	66 24       	eor	r6, r6
 8d4:	63 94       	inc	r6
 8d6:	71 2c       	mov	r7, r1
	 else ystep = -1;


	 for (; x1<=x2; x1++) {
		 if (steep) ILI9225_drawPixel(y1, x1, color);
 8d8:	a1 14       	cp	r10, r1
 8da:	b1 04       	cpc	r11, r1
 8dc:	31 f0       	breq	.+12     	; 0x8ea <ILI9225_drawLine+0xbe>
 8de:	a1 01       	movw	r20, r2
 8e0:	be 01       	movw	r22, r28
 8e2:	c7 01       	movw	r24, r14
 8e4:	0e 94 05 03 	call	0x60a	; 0x60a <ILI9225_drawPixel>
 8e8:	05 c0       	rjmp	.+10     	; 0x8f4 <ILI9225_drawLine+0xc8>
		 else       ILI9225_drawPixel(x1, y1, color);
 8ea:	a1 01       	movw	r20, r2
 8ec:	b7 01       	movw	r22, r14
 8ee:	ce 01       	movw	r24, r28
 8f0:	0e 94 05 03 	call	0x60a	; 0x60a <ILI9225_drawPixel>

		 err -= dy;
 8f4:	80 1a       	sub	r8, r16
 8f6:	91 0a       	sbc	r9, r17
		 if (err < 0) {
 8f8:	22 f4       	brpl	.+8      	; 0x902 <__stack+0x3>
			 y1 += ystep;
 8fa:	e6 0c       	add	r14, r6
 8fc:	f7 1c       	adc	r15, r7
			 err += dx;
 8fe:	84 0c       	add	r8, r4
 900:	95 1c       	adc	r9, r5

	 if (y1 < y2) ystep = 1;
	 else ystep = -1;


	 for (; x1<=x2; x1++) {
 902:	21 96       	adiw	r28, 0x01	; 1
 904:	cc 16       	cp	r12, r28
 906:	dd 06       	cpc	r13, r29
 908:	38 f7       	brcc	.-50     	; 0x8d8 <ILI9225_drawLine+0xac>
 90a:	18 c0       	rjmp	.+48     	; 0x93c <__stack+0x3d>
	 if (x1 > x2) {
		 _swap(&x1, &x2);
		 _swap(&y1, &y2);
	 }

	 dx = x2 - x1;
 90c:	26 01       	movw	r4, r12
 90e:	4c 1a       	sub	r4, r28
 910:	5d 0a       	sbc	r5, r29
	 dy = abs(y2 - y1);
 912:	c9 01       	movw	r24, r18
 914:	8e 19       	sub	r24, r14
 916:	9f 09       	sbc	r25, r15
 918:	8c 01       	movw	r16, r24
 91a:	22 f4       	brpl	.+8      	; 0x924 <__stack+0x25>
 91c:	00 27       	eor	r16, r16
 91e:	11 27       	eor	r17, r17
 920:	08 1b       	sub	r16, r24
 922:	19 0b       	sbc	r17, r25

	 int16_t err = dx / 2;
 924:	42 01       	movw	r8, r4
 926:	55 20       	and	r5, r5
 928:	1c f4       	brge	.+6      	; 0x930 <__stack+0x31>
 92a:	8f ef       	ldi	r24, 0xFF	; 255
 92c:	88 1a       	sub	r8, r24
 92e:	98 0a       	sbc	r9, r24
 930:	95 94       	asr	r9
 932:	87 94       	ror	r8
	 int16_t ystep;

	 if (y1 < y2) ystep = 1;
 934:	e2 16       	cp	r14, r18
 936:	f3 06       	cpc	r15, r19
 938:	60 f2       	brcs	.-104    	; 0x8d2 <ILI9225_drawLine+0xa6>
 93a:	c4 cf       	rjmp	.-120    	; 0x8c4 <ILI9225_drawLine+0x98>
		 if (err < 0) {
			 y1 += ystep;
			 err += dx;
		 }
	 }
 }
 93c:	df 91       	pop	r29
 93e:	cf 91       	pop	r28
 940:	1f 91       	pop	r17
 942:	0f 91       	pop	r16
 944:	ff 90       	pop	r15
 946:	ef 90       	pop	r14
 948:	df 90       	pop	r13
 94a:	cf 90       	pop	r12
 94c:	bf 90       	pop	r11
 94e:	af 90       	pop	r10
 950:	9f 90       	pop	r9
 952:	8f 90       	pop	r8
 954:	7f 90       	pop	r7
 956:	6f 90       	pop	r6
 958:	5f 90       	pop	r5
 95a:	4f 90       	pop	r4
 95c:	3f 90       	pop	r3
 95e:	2f 90       	pop	r2
 960:	08 95       	ret

00000962 <ILI9225_drawRectangle>:
 
 uint8_t ILI9225_getOrientation(void) {
	 return _orientation;
 }

 void ILI9225_drawRectangle(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t color) {
 962:	8f 92       	push	r8
 964:	9f 92       	push	r9
 966:	af 92       	push	r10
 968:	bf 92       	push	r11
 96a:	cf 92       	push	r12
 96c:	df 92       	push	r13
 96e:	ef 92       	push	r14
 970:	ff 92       	push	r15
 972:	0f 93       	push	r16
 974:	1f 93       	push	r17
 976:	cf 93       	push	r28
 978:	df 93       	push	r29
 97a:	4c 01       	movw	r8, r24
 97c:	7b 01       	movw	r14, r22
 97e:	ea 01       	movw	r28, r20
 980:	69 01       	movw	r12, r18
	 ILI9225_drawLine(x1, y1, x1, y2, color);
 982:	ac 01       	movw	r20, r24
 984:	0e 94 16 04 	call	0x82c	; 0x82c <ILI9225_drawLine>
	 ILI9225_drawLine(x1, y1, x2, y1, color);
 988:	97 01       	movw	r18, r14
 98a:	ae 01       	movw	r20, r28
 98c:	b7 01       	movw	r22, r14
 98e:	c4 01       	movw	r24, r8
 990:	0e 94 16 04 	call	0x82c	; 0x82c <ILI9225_drawLine>
	 ILI9225_drawLine(x1, y2, x2, y2, color);
 994:	96 01       	movw	r18, r12
 996:	ae 01       	movw	r20, r28
 998:	b6 01       	movw	r22, r12
 99a:	c4 01       	movw	r24, r8
 99c:	0e 94 16 04 	call	0x82c	; 0x82c <ILI9225_drawLine>
	 ILI9225_drawLine(x2, y1, x2, y2, color);
 9a0:	96 01       	movw	r18, r12
 9a2:	ae 01       	movw	r20, r28
 9a4:	b7 01       	movw	r22, r14
 9a6:	ce 01       	movw	r24, r28
 9a8:	0e 94 16 04 	call	0x82c	; 0x82c <ILI9225_drawLine>
 }
 9ac:	df 91       	pop	r29
 9ae:	cf 91       	pop	r28
 9b0:	1f 91       	pop	r17
 9b2:	0f 91       	pop	r16
 9b4:	ff 90       	pop	r15
 9b6:	ef 90       	pop	r14
 9b8:	df 90       	pop	r13
 9ba:	cf 90       	pop	r12
 9bc:	bf 90       	pop	r11
 9be:	af 90       	pop	r10
 9c0:	9f 90       	pop	r9
 9c2:	8f 90       	pop	r8
 9c4:	08 95       	ret

000009c6 <ILI9225_fillCircle>:
		 ILI9225_drawPixel(x0 + y, y0 - x, color);
		 ILI9225_drawPixel(x0 - y, y0 - x, color);
	 }
 }

 void ILI9225_fillCircle(uint8_t x0, uint8_t y0, uint8_t radius, uint16_t color) {
 9c6:	2f 92       	push	r2
 9c8:	3f 92       	push	r3
 9ca:	4f 92       	push	r4
 9cc:	5f 92       	push	r5
 9ce:	6f 92       	push	r6
 9d0:	7f 92       	push	r7
 9d2:	8f 92       	push	r8
 9d4:	9f 92       	push	r9
 9d6:	af 92       	push	r10
 9d8:	bf 92       	push	r11
 9da:	cf 92       	push	r12
 9dc:	df 92       	push	r13
 9de:	ef 92       	push	r14
 9e0:	ff 92       	push	r15
 9e2:	0f 93       	push	r16
 9e4:	1f 93       	push	r17
 9e6:	cf 93       	push	r28
 9e8:	df 93       	push	r29
 9ea:	cd b7       	in	r28, 0x3d	; 61
 9ec:	de b7       	in	r29, 0x3e	; 62
 9ee:	28 97       	sbiw	r28, 0x08	; 8
 9f0:	0f b6       	in	r0, 0x3f	; 63
 9f2:	f8 94       	cli
 9f4:	de bf       	out	0x3e, r29	; 62
 9f6:	0f be       	out	0x3f, r0	; 63
 9f8:	cd bf       	out	0x3d, r28	; 61
 9fa:	8d 83       	std	Y+5, r24	; 0x05
 9fc:	6e 83       	std	Y+6, r22	; 0x06
 9fe:	3a 83       	std	Y+2, r19	; 0x02
 a00:	29 83       	std	Y+1, r18	; 0x01

	 int16_t f = 1 - radius;
 a02:	e4 2e       	mov	r14, r20
 a04:	f1 2c       	mov	r15, r1
 a06:	81 e0       	ldi	r24, 0x01	; 1
 a08:	90 e0       	ldi	r25, 0x00	; 0
 a0a:	6c 01       	movw	r12, r24
 a0c:	ce 18       	sub	r12, r14
 a0e:	df 08       	sbc	r13, r15
	 int16_t ddF_x = 1;
	 int16_t ddF_y = -2 * radius;
 a10:	88 27       	eor	r24, r24
 a12:	99 27       	eor	r25, r25
 a14:	8e 19       	sub	r24, r14
 a16:	9f 09       	sbc	r25, r15
 a18:	9c 01       	movw	r18, r24
 a1a:	22 0f       	add	r18, r18
 a1c:	33 1f       	adc	r19, r19
 a1e:	3c 83       	std	Y+4, r19	; 0x04
 a20:	2b 83       	std	Y+3, r18	; 0x03
	 int16_t x = 0;
	 int16_t y = radius;

	 while (x<y) {
 a22:	1e 14       	cp	r1, r14
 a24:	1f 04       	cpc	r1, r15
 a26:	0c f0       	brlt	.+2      	; 0xa2a <ILI9225_fillCircle+0x64>
 a28:	64 c0       	rjmp	.+200    	; 0xaf2 <ILI9225_fillCircle+0x12c>
 a2a:	a1 2c       	mov	r10, r1
 a2c:	b1 2c       	mov	r11, r1
 a2e:	66 24       	eor	r6, r6
 a30:	63 94       	inc	r6
 a32:	71 2c       	mov	r7, r1
		 }
		 x++;
		 ddF_x += 2;
		 f += ddF_x;

		 ILI9225_drawLine(x0 + x, y0 + y, x0 - x, y0 + y, color); // bottom
 a34:	3d 81       	ldd	r19, Y+5	; 0x05
 a36:	43 2e       	mov	r4, r19
 a38:	51 2c       	mov	r5, r1
 a3a:	26 2e       	mov	r2, r22
 a3c:	31 2c       	mov	r3, r1
 a3e:	b8 86       	std	Y+8, r11	; 0x08
 a40:	af 82       	std	Y+7, r10	; 0x07
	 int16_t ddF_y = -2 * radius;
	 int16_t x = 0;
	 int16_t y = radius;

	 while (x<y) {
		 if (f >= 0) {
 a42:	dd 20       	and	r13, r13
 a44:	54 f0       	brlt	.+20     	; 0xa5a <ILI9225_fillCircle+0x94>
			 y--;
 a46:	81 e0       	ldi	r24, 0x01	; 1
 a48:	e8 1a       	sub	r14, r24
 a4a:	f1 08       	sbc	r15, r1
			 ddF_y += 2;
 a4c:	eb 81       	ldd	r30, Y+3	; 0x03
 a4e:	fc 81       	ldd	r31, Y+4	; 0x04
 a50:	32 96       	adiw	r30, 0x02	; 2
 a52:	fc 83       	std	Y+4, r31	; 0x04
 a54:	eb 83       	std	Y+3, r30	; 0x03
			 f += ddF_y;
 a56:	ce 0e       	add	r12, r30
 a58:	df 1e       	adc	r13, r31
		 }
		 x++;
 a5a:	2f 81       	ldd	r18, Y+7	; 0x07
 a5c:	38 85       	ldd	r19, Y+8	; 0x08
 a5e:	2f 5f       	subi	r18, 0xFF	; 255
 a60:	3f 4f       	sbci	r19, 0xFF	; 255
 a62:	38 87       	std	Y+8, r19	; 0x08
 a64:	2f 83       	std	Y+7, r18	; 0x07
		 ddF_x += 2;
 a66:	32 e0       	ldi	r19, 0x02	; 2
 a68:	63 0e       	add	r6, r19
 a6a:	71 1c       	adc	r7, r1
		 f += ddF_x;
 a6c:	c6 0c       	add	r12, r6
 a6e:	d7 1c       	adc	r13, r7
 a70:	42 01       	movw	r8, r4
 a72:	8f 81       	ldd	r24, Y+7	; 0x07
 a74:	98 85       	ldd	r25, Y+8	; 0x08
 a76:	88 1a       	sub	r8, r24
 a78:	99 0a       	sbc	r9, r25
 a7a:	5c 01       	movw	r10, r24
 a7c:	a4 0c       	add	r10, r4
 a7e:	b5 1c       	adc	r11, r5

		 ILI9225_drawLine(x0 + x, y0 + y, x0 - x, y0 + y, color); // bottom
 a80:	09 81       	ldd	r16, Y+1	; 0x01
 a82:	1a 81       	ldd	r17, Y+2	; 0x02
 a84:	b1 01       	movw	r22, r2
 a86:	6e 0d       	add	r22, r14
 a88:	7f 1d       	adc	r23, r15
 a8a:	9b 01       	movw	r18, r22
 a8c:	a4 01       	movw	r20, r8
 a8e:	c5 01       	movw	r24, r10
 a90:	0e 94 16 04 	call	0x82c	; 0x82c <ILI9225_drawLine>
		 ILI9225_drawLine(x0 + x, y0 - y, x0 - x, y0 - y, color); // top
 a94:	09 81       	ldd	r16, Y+1	; 0x01
 a96:	1a 81       	ldd	r17, Y+2	; 0x02
 a98:	b1 01       	movw	r22, r2
 a9a:	6e 19       	sub	r22, r14
 a9c:	7f 09       	sbc	r23, r15
 a9e:	9b 01       	movw	r18, r22
 aa0:	a4 01       	movw	r20, r8
 aa2:	c5 01       	movw	r24, r10
 aa4:	0e 94 16 04 	call	0x82c	; 0x82c <ILI9225_drawLine>
 aa8:	8f 80       	ldd	r8, Y+7	; 0x07
 aaa:	98 84       	ldd	r9, Y+8	; 0x08
 aac:	82 0c       	add	r8, r2
 aae:	93 1c       	adc	r9, r3
 ab0:	51 01       	movw	r10, r2
 ab2:	ef 81       	ldd	r30, Y+7	; 0x07
 ab4:	f8 85       	ldd	r31, Y+8	; 0x08
 ab6:	ae 1a       	sub	r10, r30
 ab8:	bf 0a       	sbc	r11, r31
		 ILI9225_drawLine(x0 + y, y0 - x, x0 + y, y0 + x, color); // right
 aba:	09 81       	ldd	r16, Y+1	; 0x01
 abc:	1a 81       	ldd	r17, Y+2	; 0x02
 abe:	94 01       	movw	r18, r8
 ac0:	c7 01       	movw	r24, r14
 ac2:	84 0d       	add	r24, r4
 ac4:	95 1d       	adc	r25, r5
 ac6:	ac 01       	movw	r20, r24
 ac8:	b5 01       	movw	r22, r10
 aca:	0e 94 16 04 	call	0x82c	; 0x82c <ILI9225_drawLine>
		 ILI9225_drawLine(x0 - y, y0 - x, x0 - y, y0 + x, color); // left
 ace:	09 81       	ldd	r16, Y+1	; 0x01
 ad0:	1a 81       	ldd	r17, Y+2	; 0x02
 ad2:	94 01       	movw	r18, r8
 ad4:	c2 01       	movw	r24, r4
 ad6:	8e 19       	sub	r24, r14
 ad8:	9f 09       	sbc	r25, r15
 ada:	ac 01       	movw	r20, r24
 adc:	b5 01       	movw	r22, r10
 ade:	0e 94 16 04 	call	0x82c	; 0x82c <ILI9225_drawLine>
	 int16_t ddF_x = 1;
	 int16_t ddF_y = -2 * radius;
	 int16_t x = 0;
	 int16_t y = radius;

	 while (x<y) {
 ae2:	2f 81       	ldd	r18, Y+7	; 0x07
 ae4:	38 85       	ldd	r19, Y+8	; 0x08
 ae6:	2e 15       	cp	r18, r14
 ae8:	3f 05       	cpc	r19, r15
 aea:	0c f4       	brge	.+2      	; 0xaee <ILI9225_fillCircle+0x128>
 aec:	aa cf       	rjmp	.-172    	; 0xa42 <ILI9225_fillCircle+0x7c>
 aee:	59 01       	movw	r10, r18
 af0:	02 c0       	rjmp	.+4      	; 0xaf6 <ILI9225_fillCircle+0x130>
 void ILI9225_fillCircle(uint8_t x0, uint8_t y0, uint8_t radius, uint16_t color) {

	 int16_t f = 1 - radius;
	 int16_t ddF_x = 1;
	 int16_t ddF_y = -2 * radius;
	 int16_t x = 0;
 af2:	a1 2c       	mov	r10, r1
 af4:	b1 2c       	mov	r11, r1
		 ILI9225_drawLine(x0 + x, y0 + y, x0 - x, y0 + y, color); // bottom
		 ILI9225_drawLine(x0 + x, y0 - y, x0 - x, y0 - y, color); // top
		 ILI9225_drawLine(x0 + y, y0 - x, x0 + y, y0 + x, color); // right
		 ILI9225_drawLine(x0 - y, y0 - x, x0 - y, y0 + x, color); // left
	 }
	 ILI9225_fillRectangle(x0-x, y0-y, x0+x, y0+y, color);
 af6:	3e 81       	ldd	r19, Y+6	; 0x06
 af8:	63 2f       	mov	r22, r19
 afa:	70 e0       	ldi	r23, 0x00	; 0
 afc:	ed 81       	ldd	r30, Y+5	; 0x05
 afe:	8e 2f       	mov	r24, r30
 b00:	90 e0       	ldi	r25, 0x00	; 0
 b02:	9b 01       	movw	r18, r22
 b04:	2e 0d       	add	r18, r14
 b06:	3f 1d       	adc	r19, r15
 b08:	ac 01       	movw	r20, r24
 b0a:	4a 0d       	add	r20, r10
 b0c:	5b 1d       	adc	r21, r11
 b0e:	6e 19       	sub	r22, r14
 b10:	7f 09       	sbc	r23, r15
 b12:	09 81       	ldd	r16, Y+1	; 0x01
 b14:	1a 81       	ldd	r17, Y+2	; 0x02
 b16:	8a 19       	sub	r24, r10
 b18:	9b 09       	sbc	r25, r11
 b1a:	0e 94 66 01 	call	0x2cc	; 0x2cc <ILI9225_fillRectangle>
 }
 b1e:	28 96       	adiw	r28, 0x08	; 8
 b20:	0f b6       	in	r0, 0x3f	; 63
 b22:	f8 94       	cli
 b24:	de bf       	out	0x3e, r29	; 62
 b26:	0f be       	out	0x3f, r0	; 63
 b28:	cd bf       	out	0x3d, r28	; 61
 b2a:	df 91       	pop	r29
 b2c:	cf 91       	pop	r28
 b2e:	1f 91       	pop	r17
 b30:	0f 91       	pop	r16
 b32:	ff 90       	pop	r15
 b34:	ef 90       	pop	r14
 b36:	df 90       	pop	r13
 b38:	cf 90       	pop	r12
 b3a:	bf 90       	pop	r11
 b3c:	af 90       	pop	r10
 b3e:	9f 90       	pop	r9
 b40:	8f 90       	pop	r8
 b42:	7f 90       	pop	r7
 b44:	6f 90       	pop	r6
 b46:	5f 90       	pop	r5
 b48:	4f 90       	pop	r4
 b4a:	3f 90       	pop	r3
 b4c:	2f 90       	pop	r2
 b4e:	08 95       	ret

00000b50 <ILI9225_maxX>:
	 _writeData(color >> 8, color);
 }

 uint16_t ILI9225_maxX() {
	 return _maxX;
 }
 b50:	80 91 03 01 	lds	r24, 0x0103
 b54:	90 91 04 01 	lds	r25, 0x0104
 b58:	08 95       	ret

00000b5a <ILI9225_maxY>:


 uint16_t ILI9225_maxY() {
	 return _maxY;
}
 b5a:	80 91 05 01 	lds	r24, 0x0105
 b5e:	90 91 06 01 	lds	r25, 0x0106
 b62:	08 95       	ret

00000b64 <main>:

#include "ILI9225.h"

int main(void)
{
	ILI9225_init();
 b64:	0e 94 c2 01 	call	0x384	; 0x384 <ILI9225_init>
    /* Replace with your application code */
    while (1) 
    {
	
	ILI9225_drawRectangle(0, 0, ILI9225_maxX()/2, ILI9225_maxY()/2, COLOR_BLUE);
 b68:	0e 94 ad 05 	call	0xb5a	; 0xb5a <ILI9225_maxY>
 b6c:	ec 01       	movw	r28, r24
 b6e:	0e 94 a8 05 	call	0xb50	; 0xb50 <ILI9225_maxX>
 b72:	9e 01       	movw	r18, r28
 b74:	36 95       	lsr	r19
 b76:	27 95       	ror	r18
 b78:	ac 01       	movw	r20, r24
 b7a:	56 95       	lsr	r21
 b7c:	47 95       	ror	r20
 b7e:	0f e1       	ldi	r16, 0x1F	; 31
 b80:	10 e0       	ldi	r17, 0x00	; 0
 b82:	60 e0       	ldi	r22, 0x00	; 0
 b84:	70 e0       	ldi	r23, 0x00	; 0
 b86:	80 e0       	ldi	r24, 0x00	; 0
 b88:	90 e0       	ldi	r25, 0x00	; 0
 b8a:	0e 94 b1 04 	call	0x962	; 0x962 <ILI9225_drawRectangle>
 b8e:	2f ef       	ldi	r18, 0xFF	; 255
 b90:	8e e9       	ldi	r24, 0x9E	; 158
 b92:	94 e2       	ldi	r25, 0x24	; 36
 b94:	21 50       	subi	r18, 0x01	; 1
 b96:	80 40       	sbci	r24, 0x00	; 0
 b98:	90 40       	sbci	r25, 0x00	; 0
 b9a:	e1 f7       	brne	.-8      	; 0xb94 <main+0x30>
 b9c:	00 c0       	rjmp	.+0      	; 0xb9e <main+0x3a>
 b9e:	00 00       	nop
	_delay_ms(1000);
	ILI9225_drawRectangle(ILI9225_maxX(), ILI9225_maxY(), ILI9225_maxX()/2, ILI9225_maxY()/2, COLOR_RED);
 ba0:	0e 94 ad 05 	call	0xb5a	; 0xb5a <ILI9225_maxY>
 ba4:	8c 01       	movw	r16, r24
 ba6:	0e 94 a8 05 	call	0xb50	; 0xb50 <ILI9225_maxX>
 baa:	ec 01       	movw	r28, r24
 bac:	0e 94 ad 05 	call	0xb5a	; 0xb5a <ILI9225_maxY>
 bb0:	7c 01       	movw	r14, r24
 bb2:	0e 94 a8 05 	call	0xb50	; 0xb50 <ILI9225_maxX>
 bb6:	98 01       	movw	r18, r16
 bb8:	36 95       	lsr	r19
 bba:	27 95       	ror	r18
 bbc:	ae 01       	movw	r20, r28
 bbe:	56 95       	lsr	r21
 bc0:	47 95       	ror	r20
 bc2:	00 e0       	ldi	r16, 0x00	; 0
 bc4:	18 ef       	ldi	r17, 0xF8	; 248
 bc6:	b7 01       	movw	r22, r14
 bc8:	0e 94 b1 04 	call	0x962	; 0x962 <ILI9225_drawRectangle>
 bcc:	2f ef       	ldi	r18, 0xFF	; 255
 bce:	8e e9       	ldi	r24, 0x9E	; 158
 bd0:	94 e2       	ldi	r25, 0x24	; 36
 bd2:	21 50       	subi	r18, 0x01	; 1
 bd4:	80 40       	sbci	r24, 0x00	; 0
 bd6:	90 40       	sbci	r25, 0x00	; 0
 bd8:	e1 f7       	brne	.-8      	; 0xbd2 <main+0x6e>
 bda:	00 c0       	rjmp	.+0      	; 0xbdc <main+0x78>
 bdc:	00 00       	nop
	_delay_ms(1000);
	  ILI9225_drawRectangle(10, 10, 110, 110, COLOR_BLUE);
 bde:	0f e1       	ldi	r16, 0x1F	; 31
 be0:	10 e0       	ldi	r17, 0x00	; 0
 be2:	2e e6       	ldi	r18, 0x6E	; 110
 be4:	30 e0       	ldi	r19, 0x00	; 0
 be6:	4e e6       	ldi	r20, 0x6E	; 110
 be8:	50 e0       	ldi	r21, 0x00	; 0
 bea:	6a e0       	ldi	r22, 0x0A	; 10
 bec:	70 e0       	ldi	r23, 0x00	; 0
 bee:	8a e0       	ldi	r24, 0x0A	; 10
 bf0:	90 e0       	ldi	r25, 0x00	; 0
 bf2:	0e 94 b1 04 	call	0x962	; 0x962 <ILI9225_drawRectangle>
 bf6:	2f ef       	ldi	r18, 0xFF	; 255
 bf8:	8e e9       	ldi	r24, 0x9E	; 158
 bfa:	94 e2       	ldi	r25, 0x24	; 36
 bfc:	21 50       	subi	r18, 0x01	; 1
 bfe:	80 40       	sbci	r24, 0x00	; 0
 c00:	90 40       	sbci	r25, 0x00	; 0
 c02:	e1 f7       	brne	.-8      	; 0xbfc <main+0x98>
 c04:	00 c0       	rjmp	.+0      	; 0xc06 <main+0xa2>
 c06:	00 00       	nop
	  _delay_ms(1000);
	 ILI9225_fillRectangle(20, 20, 120, 120, COLOR_RED);
 c08:	00 e0       	ldi	r16, 0x00	; 0
 c0a:	18 ef       	ldi	r17, 0xF8	; 248
 c0c:	28 e7       	ldi	r18, 0x78	; 120
 c0e:	30 e0       	ldi	r19, 0x00	; 0
 c10:	48 e7       	ldi	r20, 0x78	; 120
 c12:	50 e0       	ldi	r21, 0x00	; 0
 c14:	64 e1       	ldi	r22, 0x14	; 20
 c16:	70 e0       	ldi	r23, 0x00	; 0
 c18:	84 e1       	ldi	r24, 0x14	; 20
 c1a:	90 e0       	ldi	r25, 0x00	; 0
 c1c:	0e 94 66 01 	call	0x2cc	; 0x2cc <ILI9225_fillRectangle>
 c20:	2f ef       	ldi	r18, 0xFF	; 255
 c22:	8e e9       	ldi	r24, 0x9E	; 158
 c24:	94 e2       	ldi	r25, 0x24	; 36
 c26:	21 50       	subi	r18, 0x01	; 1
 c28:	80 40       	sbci	r24, 0x00	; 0
 c2a:	90 40       	sbci	r25, 0x00	; 0
 c2c:	e1 f7       	brne	.-8      	; 0xc26 <main+0xc2>
 c2e:	00 c0       	rjmp	.+0      	; 0xc30 <main+0xcc>
 c30:	00 00       	nop
	 _delay_ms(1000);
	 ILI9225_drawCircle(80, 80, 50, COLOR_YELLOW);
 c32:	20 ee       	ldi	r18, 0xE0	; 224
 c34:	3f ef       	ldi	r19, 0xFF	; 255
 c36:	42 e3       	ldi	r20, 0x32	; 50
 c38:	50 e0       	ldi	r21, 0x00	; 0
 c3a:	60 e5       	ldi	r22, 0x50	; 80
 c3c:	70 e0       	ldi	r23, 0x00	; 0
 c3e:	80 e5       	ldi	r24, 0x50	; 80
 c40:	90 e0       	ldi	r25, 0x00	; 0
 c42:	0e 94 3d 03 	call	0x67a	; 0x67a <ILI9225_drawCircle>
 c46:	2f ef       	ldi	r18, 0xFF	; 255
 c48:	8e e9       	ldi	r24, 0x9E	; 158
 c4a:	94 e2       	ldi	r25, 0x24	; 36
 c4c:	21 50       	subi	r18, 0x01	; 1
 c4e:	80 40       	sbci	r24, 0x00	; 0
 c50:	90 40       	sbci	r25, 0x00	; 0
 c52:	e1 f7       	brne	.-8      	; 0xc4c <main+0xe8>
 c54:	00 c0       	rjmp	.+0      	; 0xc56 <main+0xf2>
 c56:	00 00       	nop
      _delay_ms(1000);
	 ILI9225_fillCircle(90, 90, 30, COLOR_GREEN);
 c58:	20 ee       	ldi	r18, 0xE0	; 224
 c5a:	37 e0       	ldi	r19, 0x07	; 7
 c5c:	4e e1       	ldi	r20, 0x1E	; 30
 c5e:	6a e5       	ldi	r22, 0x5A	; 90
 c60:	8a e5       	ldi	r24, 0x5A	; 90
 c62:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <ILI9225_fillCircle>
 c66:	2f ef       	ldi	r18, 0xFF	; 255
 c68:	8e e9       	ldi	r24, 0x9E	; 158
 c6a:	94 e2       	ldi	r25, 0x24	; 36
 c6c:	21 50       	subi	r18, 0x01	; 1
 c6e:	80 40       	sbci	r24, 0x00	; 0
 c70:	90 40       	sbci	r25, 0x00	; 0
 c72:	e1 f7       	brne	.-8      	; 0xc6c <main+0x108>
 c74:	00 c0       	rjmp	.+0      	; 0xc76 <main+0x112>
 c76:	00 00       	nop
	 _delay_ms(1000);
	 ILI9225_drawLine(0, 0, ILI9225_maxX() - 1, ILI9225_maxY() - 1, COLOR_CYAN);
 c78:	0e 94 ad 05 	call	0xb5a	; 0xb5a <ILI9225_maxY>
 c7c:	ec 01       	movw	r28, r24
 c7e:	0e 94 a8 05 	call	0xb50	; 0xb50 <ILI9225_maxX>
 c82:	9e 01       	movw	r18, r28
 c84:	21 50       	subi	r18, 0x01	; 1
 c86:	31 09       	sbc	r19, r1
 c88:	ac 01       	movw	r20, r24
 c8a:	41 50       	subi	r20, 0x01	; 1
 c8c:	51 09       	sbc	r21, r1
 c8e:	0f ef       	ldi	r16, 0xFF	; 255
 c90:	17 e0       	ldi	r17, 0x07	; 7
 c92:	60 e0       	ldi	r22, 0x00	; 0
 c94:	70 e0       	ldi	r23, 0x00	; 0
 c96:	80 e0       	ldi	r24, 0x00	; 0
 c98:	90 e0       	ldi	r25, 0x00	; 0
 c9a:	0e 94 16 04 	call	0x82c	; 0x82c <ILI9225_drawLine>
 c9e:	2f ef       	ldi	r18, 0xFF	; 255
 ca0:	8e e9       	ldi	r24, 0x9E	; 158
 ca2:	94 e2       	ldi	r25, 0x24	; 36
 ca4:	21 50       	subi	r18, 0x01	; 1
 ca6:	80 40       	sbci	r24, 0x00	; 0
 ca8:	90 40       	sbci	r25, 0x00	; 0
 caa:	e1 f7       	brne	.-8      	; 0xca4 <main+0x140>
 cac:	00 c0       	rjmp	.+0      	; 0xcae <main+0x14a>
 cae:	00 00       	nop
	 _delay_ms(1000);
	ILI9225_clear();
 cb0:	0e 94 99 01 	call	0x332	; 0x332 <ILI9225_clear>
    }
 cb4:	59 cf       	rjmp	.-334    	; 0xb68 <main+0x4>

00000cb6 <_exit>:
 cb6:	f8 94       	cli

00000cb8 <__stop_program>:
 cb8:	ff cf       	rjmp	.-2      	; 0xcb8 <__stop_program>
